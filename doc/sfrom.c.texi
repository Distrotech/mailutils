/* sfrom, Simple From */
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <mailutils.h>

#define BUFFER_SIZE 64
int
main (int argc, const char **argv)
@{
   char from[BUFFER_SIZE];
   char subject[BUFFER_SIZE];
   char *mail;
   mailbox_t mbox;
   int status
   size_t msgno, total = 0;

   mail = (argc == 2) ? argv[1] : getenv ("MAIL");

   status = mailbox_create (&mbox, mail, 0);
   if (status != 0)
     @{
        fprintf (stderr, "mailbox_create: failed\n")
        exit (EXIT_FAILURE);
     @}

   status = mailbox_open (mbox, MU_STREAM_READ);
   if (status != 0)
     @{
        fprintf (stderr, "mailbox_open: failed\n");
        exit (EXIT_FAILURE);
     @}

   status = mailbox_scan (mbox, &total);
   if (status != 0)
     @{
        fprintf (stderr, "mailbox_scan: failed\n");
        exit (EXIT_FAILURE);
     @}

   for (msgno = 1; msgno <= total; msgno++)
      @{
         message_t msg;
         header_t hdr;

         if ((status = mailbox_get_message (mbox, msgno, &msg)) != 0
             || (status = message_get_header (msg, &hdr)) != 0)
           @{
               fprintf (stderr, "Error retrieving headers\n");
               exit (EXIT_FAILURE);
           @}

         status = header_get_value (hdr, MU_HEADER_FROM, from,
                                    sizeof (from), NULL);
         if (status != 0)
            strcpy (from, "(NO FROM)");

         status = header_get_value (hdr, MU_HEADER_SUBJECT, subject,
                                    sizeof (subject), NULL);
         if (status != 0)
            strcpy (subject, "(NO SUBJECT)");

         printf ("%s\t%s\n", from, subject);
      @}

    mailbox_close (mbox);
    mailbox_destroy (&mbox);
    return 0;
@}

@example
@cartouche
% MAIL=pop://alain@@localhost ./sfrom
Passwd: xxxx
Jim Meyering <meyering@@foo.org>      fetish(shellutils) beta
Fran@,{c}ois Pinard <pinard@@bar.org> recode new alpha
@dots{}
@end cartouche
@end example
