This is mailutils.info, produced by makeinfo version 4.13 from
mailutils.texi.

INFO-DIR-SECTION Email
START-INFO-DIR-ENTRY
* Mailutils: (mailutils).       GNU Mail Utilities.
END-INFO-DIR-ENTRY
INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* comsatd: (mailutils)comsatd.          Comsat Daemon.
* frm: (mailutils)frm.                  List Headers from a Mailbox.
* guimb: (mailutils)guimb.              Mailbox Processing Language.
* imap4d: (mailutils)imap4d.            IMAP4 Daemon.
* mail: (mailutils)mail.                Send and Receive Mail.
* maidag: (mailutils)maidag.            A General-Purpose Mail Delivery Agent.
* messages: (mailutils)messages.        Count Messages in a Mailbox.
* movemail: (mailutils)movemail.        Move Mail between Mailboxes.
* pop3d: (mailutils)pop3d.              POP3 Daemon.
* readmsg: (mailutils)readmsg.          Extract Messages from a Folder.
* sieve: (mailutils)sieve.              Mail Filtering Utility.
* mimeview: (mailutils)mimeview.        View MIME Messages.
* mu: (mailutils)mu.                    Mailutils Multi-Purpose Tool
END-INFO-DIR-ENTRY

   Published by the Free Software Foundation, 51 Franklin Street, Fifth
Floor Boston, MA 02110-1301, USA

   Copyright (C) 1999-2004, 2008-2012 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover, and no Back-Cover texts.  A copy of
the license is included in the section entitled "GNU Free Documentation
License".


File: mailutils.info,  Node: Require Statement,  Next: Comparators,  Prev: Preprocessor,  Up: Sieve Language

5.4 Require Statement
=====================

     Syntax:   require STRING;
               require STRING-LIST;

   The require statement informs the parser that a script makes use of
a certain extension.  Multiple capabilities can be declared using the
second form of the statement.  The actual handling of a capability name
depends on its suffix.

   If the name starts with `comparator-', it is understood as a request
to use the specified comparator.  The comparator name consists of the
characters following the suffix.

   If the name starts with `test-', it means a request to use the given
test.  The test name consists of the characters following the suffix.

   Otherwise, the capability is understood as a name of an action to be
used.

   The `require' statement, if present, must be used before any other
statement that is using the required capability.  As an extension, the
GNU sieve allows the `require' and any other statements to be
interspersed.

   By default the following actions and comparators need not be
explicitly required:

   * stop

   * keep

   * discard

   * i;octet

   * i;ascii-casemap

   Example:

     require ["fileinto", "reject"];

     require "fileinto";

     require "comparator-i;ascii-numeric";

   When processing arguments for `require' statement, GNU libmu_sieve
uses the following algorithm:

  1. Look up the name in a symbol table.  If the name begins with
     `comparator-' it is looked up in the comparator table.  If it
     begins with `test-', the test table is used instead.  Otherwise
     the name is looked up in the action table.

  2. If the name is found, the search is terminated.

  3. Otherwise, transform the name.  First, any `comparator-' or
     `test-' prefix is stripped.  Then, any character other than
     alphanumeric characters, `.' and `,' is replaced with dash (`-').
     The name thus obtained is used as a file name of an external
     loadable module.

  4. Try to load the module.  The module is searched in the following
     search paths (in the order given):

       1. Mailutils module directory.  By default it is
          `$prefix/lib/mailutils'.

       2. Sieve library path as given with the `-L' options in the
          command line

       3. Additional search directories specified with the
          `#searchpath' directive.

       4. The value of the environment variable `LTDL_LIBRARY_PATH'.

       5. System library search path: The system dependent library
          search path (e.g. on Linux it is set by the contents of the
          file `/etc/ld.so.conf' and the value of the environment
          variable `LD_LIBRARY_PATH').

     The value of `LTDL_LIBRARY_PATH' and `LD_LIBRARY_PATH' must be a
     colon-separated list of absolute directories, for example,
     `"/usr/lib/mypkg:/lib/foo"'.

     In any of these directories, `libmu_sieve' first attempts to find
     and load the given filename.  If this fails, it tries to append the
     following suffixes to the file name:

       1. the libtool archive extension `.la'

       2. the extension used for native dynamic libraries on the host
          platform, e.g., `.so', `.sl', etc.

  5. If the module is found, `libmu_sieve' executes its initialization
     function (see below) and again looks up the name in the symbol
     table.  If found, search terminates successfully.

  6. If either the module is not found, or the symbol wasn't found
     after execution of the module initialization function, search is
     terminated with an error status.  `libmu_sieve' then issues the
     following diagnostic message:

          source for the required action NAME is not available


File: mailutils.info,  Node: Comparators,  Next: Tests,  Prev: Require Statement,  Up: Sieve Language

5.5 Comparators
===============

GNU libmu_sieve supports the following built-in comparators:

`i;octet'
     This comparator simply compares the two arguments octet by octet

`i;ascii-casemap'
     It treats uppercase and lowercase characters in the ASCII subset of
     UTF-8 as the same.  This is the default comparator.

`i;ascii-numeric'
     Treats the two arguments as ASCII representation of decimal
     numbers and compares their numeric values.  This comparator must
     be explicitly required prior to use.


File: mailutils.info,  Node: Tests,  Next: Actions,  Prev: Comparators,  Up: Sieve Language

5.6 Tests
=========

This section describes the built-in tests supported by GNU libmu_sieve.
In the discussion below the following macro-notations are used:

MATCH-TYPE
     This tag specifies the matching type to be used with the test.  It
     can be one of the following:

    `:is'
          The `:is' match type describes an absolute match; if the
          contents of the first string are absolutely the same as the
          contents of the second string, they match.  Only the string
          "frobnitzm" is the string "frobnitzm".  The null key ":is"
          and only ":is" the null value.  This is the default
          match-type.

    `:contains'
          The `:contains' match type describes a substring match.  If
          the value argument contains the key argument as a substring,
          the match is true.  For instance, the string "frobnitzm"
          contains "frob" and "nit", but not "fbm".  The null key "" is
          contained in all values.

    `:matches'
          The `:matches' version specifies a wildcard match using the
          characters `*' and `?'.  `*' matches zero or more characters,
          and `?' matches a single character.  `?' and `*' may be
          escaped as `\\?' and `\\*' in strings to match against
          themselves.  The first backslash escapes the second backslash;
          together, they escape the `*'.

    `:regex'
          The `:regex' version specifies a match using POSIX Extended
          Regular Expressions.

    `:value RELATION'
          The `:value' match type does a relational comparison between
          strings.  Valid values for RELATION are:

         "eq"
               Equal

         "ne"
               Not Equal

         "gt"
               Greater Than

         "ge"
               Greater than or Equal

         "lt"
               Less Than

         "le"
               Less than or Equal

    `:count RELATION'
          This match type first determines the number of the specified
          entities (headers, addresses, etc.) in the message and does a
          relational comparison of the number of entities to the values
          specified in the test expression.  The test expression must
          be a list of one element.

COMPARATOR
     A COMPARATOR syntax item is defined as follows:

          :comparator "COMPARATOR-NAME"
     It instructs sieve to use the given comparator with the test.  If
     COMPARATOR-NAME is not one of `i;octet', `i;ascii-casemap' it must
     be required prior to using it.  For example:

          require "comparator-i;ascii-numeric";

          if header :comparator "i;ascii-numeric" :is "X-Num" "10"
            {
              ...

ADDRESS-PART
     This syntax item is used when testing structured Internet
     addresses.  It specifies which part of an address must be used in
     comparisons.  Exactly one of the following tags may be used:

    `:all'
          Use the whole address.  This is the default.

    `:localpart'
          Use local part of the address.

    `:domain'
          Use domain part of the address.


   _Notice_, that MATCH-TYPE modifiers interact with comparators.  Some
comparators are not suitable for matching with `:contains' or
`:matches'.  If this occurs, sieve issues an appropriate error message.
For example, the statement:

     if header :matches :comparator "i;ascii-numeric"
   would result in the following error message:

     comparator `i;ascii-numeric' is incompatible with match type `:matches'
     in call to `header'

   GNU Sieve supports two kinds of tests.  "Built-in tests" are defined
within the library and do not require any external files.  "External
tests" are loadable modules that can be linked in at run time using the
`require' statement (*note Require Statement::).

* Menu:

* Built-in Tests::
* External Tests::


File: mailutils.info,  Node: Built-in Tests,  Next: External Tests,  Up: Tests

5.6.1 Built-in Tests
--------------------

 -- Test: false
     This test always evaluates to "false".

 -- Test: true
     This test always evaluates to "true".

 -- Test:  address [ADDRESS-PART] [COMPARATOR] [MATCH-TYPE]
          HEADER-NAMES KEY-LIST
     Tagged arguments:

    ADDRESS-PART
          Selects the address part to compare.  Default is the whole
          email address (`:all').

    COMPARATOR
          Specifies the comparator to be used instead of the default
          `i;ascii-casemap'.

    MATCH-TYPE
          Specifies the match type to be used instead of the default
          `:is'.

     Required arguments:

    HEADER-NAMES
          A list of header names.

    KEY-LIST
          A list of address values.
     The `address' test matches Internet addresses in structured headers
     that contain addresses.  It returns `true' if any header contains
     any key in the specified part of the address, as modified by
     COMPARATOR and MATCH-TYPE optional arguments.

     This test returns `true' if any combination of the HEADER-NAMES
     and KEY-LIST arguments match.

     The `address' primitive never acts on the phrase part of an email
     address, nor on comments within that address.  Use the `header'
     test instead.  It also never acts on group names, although it does
     act on the addresses within the group construct.

     Example:

          if address :is :all "from" "tim@example.com"
            {
               discard;
            }

 -- Test:  size [:over | :under] LIMIT(number)
     The `size' test deals with the size of a message.  The required
     argument LIMIT represents the size of the message in bytes.  It
     may be suffixed with the following quantifiers:

    `k'
    `K'
          The number is expressed in kilobytes.

    `m'
    `M'
          The number is expressed in megabytes.

    `g'
    `G'
          The number is expressed in gigabytes.

     If the tagged argument is `:over', and the size of the message is
     greater than NUMBER, the test is true; otherwise, it is false.

     If the argument is `:under', and the size of the message is less
     than the NUMBER, the test is true; otherwise, it is false.

     Otherwise, the test is true only if the size of the message equals
     exactly NUMBER.  This is a GNU extension.

     The size of a message is defined to be the number of octets from
     the initial header until the last character in the message body.

 -- Test:  envelope [ADDRESS-PART] [COMPARATOR] [MATCH-TYPE]
          ENVELOPE-PART(string-list) KEY-LIST(string-list)
     Tagged arguments:

    ADDRESS-PART
          Selects the address part to compare.  Default is the whole
          email address (`:all').

    COMPARATOR
          Specifies the comparator to be used instead of the default
          `i;ascii-casemap'.

    MATCH-TYPE
          Specifies the match type to be used instead of the default
          `:is'.
     Required arguments:

    ENVELOPE-PARTS
          A list of envelope parts to operate upon.

    KEY-LIST
          A list of address values.
     The `envelope' test is true if the specified part of the SMTP
     envelope matches the specified key.

     If the envelope-part strings is (case insensitive) `from', then
     matching occurs against the FROM address used in the `SMTP MAIL'
     command.

     _Notice_, that due to the limitations imposed by SMTP envelope
     structure the use of any other values in ENVELOPE-PARTS header is
     meaningless.

 -- Test:  exists HEADER-NAMES(string-list)
     Required arguments:

    HEADER-NAMES
          List of message header names.


     The `exists' test is `true' if the headers listed in HEADER-NAMES
     argument exist within the message.  All of the headers must exist
     or the test is false.

     The following example throws out mail that doesn't have a From
     header and a Date header:

          if not exists ["From","Date"]
            {
               discard;
            }

 -- Test:  header [COMPARATOR] [MATCH-TYPE] [:mime]
          HEADER-NAMES(string-list) KEY-LIST(string-list)

     Tagged arguments:

    COMPARATOR
          Specifies the comparator to be used instead of the default
          `i;ascii-casemap'.

    MATCH-TYPE
          Specifies the match type to be used instead of the default
          `:is'.

    :mime
          This tag instructs `header' to search through the mime
          headers in multipart messages as well.



     Required arguments:

    HEADER-NAMES
          A list of header names.

    KEY-LIST
          A list of header values.


     The `header' test evaluates to true if any header name matches any
     key.  The type of match is specified by the optional match
     argument, which defaults to ":is" if not explicitly given.

     The test returns `true' if any combination of the HEADER-NAMES and
     KEY-LIST arguments match.

     If a header listed in HEADER-NAMES exists, it contains the null
     key (`""').  However, if the named header is not present, it does
     not contain the null key.  So if a message contained the header

          X-Caffeine: C8H10N4O2


     these tests on that header evaluate as follows:

          header :is ["X-Caffeine"] [""] => false
          header :contains ["X-Caffeine"] [""] => true


File: mailutils.info,  Node: External Tests,  Prev: Built-in Tests,  Up: Tests

5.6.2 External Tests
--------------------

 -- Test:  numaddr [:over | :under] HEADER-NAMES(string-list)
          COUNT(number)

     Synopsis:
          require "test-numaddr";
          ...
          if numaddr ARGS
            {
              ...
            }

     Description: This test is provided as an example of loadable
     extension tests.  You must use `require "test-numaddr"' statement
     before actually using it.

     The `numaddr' test counts Internet addresses in structured headers
     that contain addresses.  It returns true if the total number of
     addresses satisfies the requested relation.

     If the tagged argument is `:over' and the number of addresses is
     greater than COUNT, the test is true; otherwise, it is false.

     If the tagged argument is `:under' and the number of addresses is
     less than COUNT, the test is true; otherwise, it is false.

     If the tagged argument is not given, `:over' is assumed.

 -- Test:  spamd [:host TCP-HOST(string)] [:port TCP-PORT(number)]
          [:socket UNIX-SOCKET(string)] [:user NAME(string)] [:over |
          :under LIMIT(string)]
     Synopsis:
          require "test-spamd";
          ...
          if spamd ARGS
            {
              # This is spam
              ...
            }

     Description: This test is an interface to SpamAssassin filter.  It
     connects to the `spamd' daemon using connection parameters
     specified by tagged arguments `:host' and `:port' (if the daemon
     is listening on an INET socket), or `:socket' (if the daemon is
     listening on a UNIX socket) and returns true, if SpamAssassin
     qualifies the message as spam.  Tagged argument LIMIT alters the
     default behavior.  Its value is a string representation of a
     floating point number.  If the tag `:over' is used, then the test
     returns true if the spam score returned from SpamAssassin is
     greater than LIMIT.  Otherwise, if `:under' is used, the test
     returns true if the spam score is less than LIMIT.  The comparison
     takes into account three decimal digits.

     Tagged argument `:user' allows to select a specific user profile.
     If it is not given, the user name is determined using the effective
     UID.

     Before returning, the `spamd' test adds the following headers to
     the message:

    X-Spamd-Status
          `YES' or `NO', depending on whether the message is qualified
          as spam or ham.

    X-Spamd-Score
          Actual spam score value.

    X-Spamd-Threshold
          Spam score threshold, as configured in SpamAssassin settings.

    X-Spamd-Keywords
          Comma-separated list of keywords, describing the spam checks
          that succeeded for this message.

     Example:
          request "test-spamd";

          if spamd :host 127.0.0.1 :port 3333
            {
               discard;
            }


 -- Test:  list [COMPARATOR] [MATCH-TYPE] [ :delim DELIMITERS(string) ]
          HEADERS(string-list) KEYS(string-list)
     Synopsis:
          require "test-list";
          if list ARGS
            {
               ...
            }

     Description: The `list' test evaluates to true if any of HEADERS
     match any key from KEYS.  Each header is regarded as containing a
     list of keywords.  By default, comma is assumed as list separator.
     This can be overridden by specifying the `:delim' tag, whose value
     is a string consisting of valid list delimiter characters.

     Example: This test can be used in conjunction with the `spamd' test
     described above:

          require ["fileinto", "test-spamd", "test-list"];

          if spamd :host 127.0.0.1 :port 3333
            {
               if list :matches :delim " ,"
                       "X-Spamd-Keywords" [ "HTML_*", "FORGED_*" ]
                 {
                    fileinto "~/mail/spam";
                 }
               else
                 {
                    discard;
                 }
            }

 -- Test:  timestamp [:before | :after] HEADER(string) DATE(string)
     Synopsis:
          require "test-timestamp";

          if timestamp ARG
            {
               ...
            }

     Description: The `timestamp' test compares the value of a
     structured date header field (HEADER) with the given date (DATE).

     If the tagged argument is `:after' and the date from the header is
     after the specified date the result is true, otherwise, if the
     header date is before the given date, the result is false.

     If the tagged argument is `:before' and the date from the header is
     before the specified date the result is true, otherwise, if the
     header date is after the given date, the result is false.

     If no tagged argument is supplied, `:after' is assumed.

     Almost any date format is understood.  *Note Date Input Formats::,
     for a detailed information on date formats.

     Example: The test below succeeds if the date in
     `X-Expire-Timestamp' header is more than 5 days older than the
     current date:

          require "test-timestamp";

          if timestamp :before "X-Expire-Timestamp" "now - 5 days"
            {
               discard;
            }


File: mailutils.info,  Node: Actions,  Next: GNU Extensions,  Prev: Tests,  Up: Sieve Language

5.7 Actions
===========

There are two groups of GNU Sieve actions: "built-in actions", which
are defined within the library, and "external actions", i.e.  loadable
modules that can be linked in at run time using the `require' statement
(*note Require Statement::).

* Menu:

* Built-in Actions::
* External Actions::


File: mailutils.info,  Node: Built-in Actions,  Next: External Actions,  Up: Actions

5.7.1 Built-in Actions
----------------------

The GNU libmu_sieve supports the following built-in actions:

   * stop

   * keep

   * discard

   * fileinto

   * reject

   * redirect

   Among them the first three actions do not need to be explicitly
required by a `require' statement, while the others do.

   These actions are described in detail below.

 -- Action: stop
     The `stop' action ends all processing.  If no actions have been
     executed, then the `keep' action is taken.

 -- Action: keep
     The effect of this action is to preserve the current message in the
     mailbox.  This action is executed if no other action has been
     executed.

 -- Action: discard
     `Discard' silently throws away the current message.  No
     notification is returned to the sender, the message is deleted
     from the mailbox.

     Example:
          if header :contains ["from"] ["idiot@example.edu"]
            {
              discard;
            }

 -- Action: fileinto [:permissions MODE] FOLDER
     Required arguments:

    FOLDER
          A string representing the folder name

     Tagged arguments:

    `:permissions MODE'
          Specifies the permissions to use, if the mailbox is created.

     The `fileinto' action delivers the message into the specified
     folder.  If the folder is local, it is created using permissions
     `0600', for regular files, and `0700' for directories.  This
     default can be changed by using the `:permissions' tag.  Its
     argument is a mode specification, similar to that used by `chmod'
     shell utility.  It is a list of permissions settings separated by
     commas.  Each setting begins with one of the following letters:

    g
          Set permissions for the users in the file group.

    o
          Set permissions for users not in the file's group.

     This letter must be followed by either `+' or `=' and the list of
     permissions to be set.  This latter list is a string containing
     any one or both of the following characters:

    r
          Grant permission to read.

    w
          Grant permission to write.

     For example, the following instruction creates the mailbox
     `~/shared' which will be world readable and writable for the group:

            fileinto :permissions "g=rw,o=r" "~/shared"

     Notice that:

       1. The `:permissions' setting are affected by the current umask
          value.

       2. Only `r' and `w' permissions can be set, since other
          permissions do not seem to be useful for mailboxes.  However,
          for mailboxes that have a directory structure (such as
          maildir and MH), any settings in `g' and `o' sets imply
          setting the executable bit.

       3. Owner's permissions cannot be set.  The owner always has all
          permissions on the mailbox he created.

       4. The `:permissions' settings apply only to local mailboxes.
          They are ignored for remote mailboxes.


 -- Action: reject REASON
     The optional `reject' action refuses delivery of a message by
     sending back a message delivery notification to the sender.  It
     resends the message to the sender, wrapping it in a "reject" form,
     noting that it was rejected by the recipient.  The required
     argument REASON is a string specifying the reason for rejecting
     the message.

     Example:

     If the message contained
          Date: Tue, 1 Apr 1997 09:06:31 -0800 (PST)
          From: coyote@desert.example.org
          To: roadrunner@acme.example.com
          Subject: I have a present for you

          I've got some great birdseed over here at my place.
          Want to buy it?


     and the user's script contained:

          if header :contains "from" "coyote@desert.example.org"
            {
              reject "I am not taking mail from you, and I don't want
                      your birdseed, either!";
            }
     then the original sender <coyote@desert.example.org> would receive
     the following notification:

          To: <coyote@desert.example.org>
          X-Authentication-Warning: roadrunner set sender using -f flag
          Content-Type: multipart/mixed; boundary=----- =_aaaaaaaaaa0
          MIME-Version: 1.0
          ----- =_aaaaaaaaaa0
          The original message was received at
          Tue, 1 Apr 1997 09:07:15 -0800 from
          coyote@desert.example.org.
          Message was refused by recipient's mail filtering program.
          Reason given was as follows:

          I am not taking mail from you, and I don't want your
          birdseed, either!

          ----- =_aaaaaaaaaa0
          Content-Type: message/delivery-status

          Reporting-UA: sieve; GNU Mailutils 0.1.3
          Arrival-Date: Tue, 1 Apr 1997 09:07:15 -0800
          Final-Recipient: RFC822; roadrunner@acme.example.com
          Action: deleted
          Disposition: automatic-action/MDN-sent-automatically;deleted
          Last-Attempt-Date: Tue, 1 Apr 1997 09:07:15 -0800

          ----- =_aaaaaaaaaa0
          Content-Type: message/rfc822

          From: coyote@desert.example.org
          To: roadrunner@acme.example.com
          Subject: I have a present for you

          I've got some great birdseed over here at my place.
          Want to buy it?
          ----- =_aaaaaaaaaa0

     If the REASON argument is rather long, the common approach is to
     use the combination of the `text:' and `#include' keywords, e.g.:

          if header :mime :matches "Content-Type"
                    [ "*application/msword;*", "*audio/x-midi*" ]
            {
              reject text:
          #include "nomsword.txt"
              .
              ;
            }


 -- Action: redirect ADDRESS
     The `redirect' action is used to send the message to another user
     at a supplied ADDRESS, as a mail forwarding feature does.  This
     action makes no changes to the message body or existing headers,
     but it may add new headers.  It also modifies the envelope
     recipient.

     The `redirect' command performs an MTA-style "forward" -- that is,
     what you get from a `.forward' file using `sendmail' under UNIX.
     The address on the SMTP envelope is replaced with the one on the
     `redirect' command and the message is sent back out.  _Notice_,
     that it differs from the MUA-style forward, which creates a new
     message with a different sender and message ID, wrapping the old
     message in a new one.


File: mailutils.info,  Node: External Actions,  Prev: Built-in Actions,  Up: Actions

5.7.2 External Actions
----------------------

_Editor's note:_ The information in this node may be obsolete or
otherwise inaccurate.  This message will disappear, once this node
revised.

GNU Mailutils is shipped with a set of external Sieve actions.  These
actions are compiled as loadable modules and must be required prior to
use (*note Require Statement::).

 -- Action:  moderator [:keep] [:address ADDRESS(string)] [:source
          SIEVE-FILE(string)]
     Synopsis:
          require "moderator"
          moderator ARGS;

     Description: This action is a moderator robot for Mailman-driven
     mail archives.  A Mailman moderation request is a MIME message
     consisting of the following three parts:

     N             Content-Type                Description
     ---------------------------------------------------------------------- 
     1             text/plain                  Introduction for the human
                                               reader.
     2             message/rfc822              Original submission.
     3             message/rfc822              Mailman control message.

     Replying to part 3 (keeping the subject intact) instructs Mailman
     to discard the original submission.

     Replying to part 3 while adding an `Approved:' header with the list
     password in it approves the submission.

     The `moderator' action spawns an inferior Sieve machine and
     filters the original submission (part 2) through it.  If the
     inferior machine marks the message as deleted, the action replies
     to the control message, thereby causing the submission to be
     discarded.  The `From:' address of the reply can be modified using
     `:address' tag.  After discarding the message, `moderator' marks
     it as deleted, unless it is given `:keep' tag.

     The argument of `:source' tag, if given, specifies the Sieve
     source file to be used on the message.  If `:tag' is not present,
     `moderator' will create and use a copy of the existing Sieve
     machine.

     The action checks the message structure: it will bail out if the
     message does not have exactly 3 MIME parts, or if parts 2 and 3
     are not of `message/rfc822' type.  It is the responsibility of the
     caller to make sure the message is actually a valid Mailman
     moderation request (see the example below).

     Example:
          if allof(header :is "Sender" "mailman-bounces@gnu.org",
                   header :is "X-List-Administrivia" "yes")
            {
               moderator :source "~/.sieve/mailman.sv";
            }

 -- Action:  pipe [:envelope] COMMAND(string)
     Synopsis:
          require "pipe";
          if pipe ARGS
            {
               ...
            }

     Description: The `pipe' action sends executes a command specified
     by its argument and sends the entire message to its standard
     input.  The COMMAND argument supplies the command line.

     The envelope of the message is included, if the `:envelope' tag is
     given.

     Example: The example below uses the `maidag' utility (*note
     maidag::) to forward the message to user `gray' on the machine
     `mail.gnu.org'.

          require "pipe";

          pipe "/usr/sbin/maidag --url smtp://gray@mail.gnu.org"

 -- Action:  vacation [:days NDAYS(number)] [:subject SUBJECT(string)]
          [:aliases ADDRLIST(string-list)] [:addresses
          NOREPLY-ADDRESS(string-list)] [:reply_regex EXPR(string)]
          [:reply_prefix PREFIX(string)] REPLY-TEXT(string)
     Syntax:
          require "vacation";
          vacation ARGS;

     Description: The `vacation' action returns a message with
     REPLY-TEXT to the sender.  It is intended to inform the sender
     that the recipient is not currently reading his mail.

     If the `:subject' tag is given, its argument sets the subject of
     the message.  Otherwise, the subject is formed by prefixing
     original subject with `Re:', or PREFIX, given with the
     `:reply_prefix' tag.  Before prefixing, any original prefixes
     matching extended regular expression EXPR (`:reply_regex' tag) are
     stripped from the subject line.  If `:reply_regex' is not
     specified, the default regexp is `^re: *'.

     The `:aliases' tag instructs `vacation' to handle messages for any
     address in ADDRLIST in the same manner as those received for the
     user's principal email.

     Before processing, `vacation' compares the sender address with its
     "address exclusion list".  Elements of this list are extended
     case-insensitive regular expressions.  If the sender address
     matches any of these expressions, the message will not be replied.
     The default exclusion list is:

              .*-REQUEST@.*
              .*-RELAY@.*
              .*-OWNER@.*
              ^OWNER-.*
              ^postmaster@.*
              ^UUCP@.*
              ^MAILER@.*
              ^MAILER-DAEMON@.*

     New entries can be added to this list using `:addresses' tag.

     The `:days' tag sets the "reply interval".  A reply is sent to
     each sender once in NDAYS days.  GNU Sieve keeps track of sender
     addresses and dates in a DBM file `.vacation' stored in the user's
     home directory.  This tag is available only if Mailutils is
     compiled with DBM support.


File: mailutils.info,  Node: GNU Extensions,  Prev: Actions,  Up: Sieve Language

5.8 GNU Extensions
==================

This section summarizes the GNU extensions to the sieve language

  1. Multiline strings syntax

     GNU libmu_sieve understands the following multiline string syntax:

          text:[-][DELIMITER]
          ....
          DELIMITER

     The meaning of optional flags is the same as in shell "here
     document" construct: the dash strips all leading tab characters
     from the string body, thus allowing it to be indented in a natural
     fashion; DELIMITER introduces the new end-of-text delimiter
     instead of the default dot.  If DELIMITER starts with a backslash,
     no preprocessing will be performed within a string.

  2. Handling of the `require' statement.

        * According to the RFC an error must occur if a `require'
          appears after a command other than `require'.  The GNU sieve
          library allows interspersing the `require' and other
          statements.  The only requirement is that `require' must
          occur before a statement that is using the required
          capability (*note Require Statement::).

        * Prefixing the required capability with "test" requires the use
          of an extension test.

  3. `header' test

     The `header' takes an optional argument `:mime', meaning to scan
     the headers from each part of a multipart message.

  4. `size' test

     The `size' test allows to omit the optional argument
     (:over|:under).  In this case exact equality is assumed.

  5. `envelope' test

     The only value that can be meaningfully used as the first required
     argument of an `envelope' test is `from'.  This limitation may
     disappear from the subsequent releases.

  6. `fileinto' action

     The `fileinto' action allows to specify permissions on the mailbox,
     in case it is created (*note fileinto::).

  7. Match type optional argument.

     Along with the usual `:is', `:matches' and `contains' matching
     type, GNU sieve library understands `:regex' type.  This matching
     type toggles POSIX Extended Regular Expression matching.


File: mailutils.info,  Node: News,  Next: Acknowledgement,  Prev: Reporting Bugs,  Up: Top

6 Getting News About GNU Mailutils
**********************************

The two places to look for any news regarding GNU Mailutils are the
Mailutils homepage at `http://mailutils.org' or
`http://www.gnu.org/software/mailutils', and the project page at
`http://savannah.gnu.org/projects/mailutils'.

   The updated versions of this manual are available online from
`http://mailutils.org/manual'.  See also Mailutils Wiki
(http://mailutils.org/wiki) for the latest updates.


File: mailutils.info,  Node: Acknowledgement,  Next: References,  Prev: News,  Up: Top

7 Acknowledgement
*****************

In no particular order,

   * Jakob Kaivo <jkaivo@ndn.net>,

   * Jeff Bailey <jbailey@gnu.org>,

   * Sean Perry <shaleh@debian.org>,

   * Thomas Fletcher <thomasf@qnx.com>,

   * Dave Inglis <dinglis@qnx.com>,

   * Brian Edmond <briane@qnx.com>,

   * Sam Roberts <sroberts@uniserve.com>,

   * Sergey Poznyakoff <gray@Mirddin.farlep.net>,

   * Franc,ois Pinard  <pinard@IRO.UMontreal.CA>.

   * Jordi Mallach <jordi@sindominio.net>

   * Wojciech Polak <polak@gnu.org>


File: mailutils.info,  Node: References,  Next: Date Input Formats,  Prev: Acknowledgement,  Up: Top

Appendix A References
*********************

            _*Editor's note:* This node is to be written._


File: mailutils.info,  Node: Date Input Formats,  Next: Usage Vars,  Prev: References,  Up: Top

Appendix B Date Input Formats
*****************************

First, a quote:

     Our units of temporal measurement, from seconds on up to months,
     are so complicated, asymmetrical and disjunctive so as to make
     coherent mental reckoning in time all but impossible.  Indeed, had
     some tyrannical god contrived to enslave our minds to time, to
     make it all but impossible for us to escape subjection to sodden
     routines and unpleasant surprises, he could hardly have done
     better than handing down our present system.  It is like a set of
     trapezoidal building blocks, with no vertical or horizontal
     surfaces, like a language in which the simplest thought demands
     ornate constructions, useless particles and lengthy
     circumlocutions.  Unlike the more successful patterns of language
     and science, which enable us to face experience boldly or at least
     level-headedly, our system of temporal calculation silently and
     persistently encourages our terror of time.

     ...  It is as though architects had to measure length in feet,
     width in meters and height in ells; as though basic instruction
     manuals demanded a knowledge of five different languages.  It is
     no wonder then that we often look into our own immediate past or
     future, last Tuesday or a week from Sunday, with feelings of
     helpless confusion.  ...

     -- Robert Grudin, `Time and the Art of Living'.

   This section describes the textual date representations that GNU
programs accept.  These are the strings you, as a user, can supply as
arguments to the various programs.  The C interface (via the `get_date'
function) is not described here.

* Menu:

* General date syntax::            Common rules.
* Calendar date items::            19 Dec 1994.
* Time of day items::              9:20pm.
* Time zone items::                EST, PDT, GMT.
* Day of week items::              Monday and others.
* Relative items in date strings:: next tuesday, 2 years ago.
* Pure numbers in date strings::   19931219, 1440.
* Seconds since the Epoch::        @1078100502.
* Specifying time zone rules::     TZ="America/New_York", TZ="UTC0".
* Authors of get_date::            Bellovin, Eggert, Salz, Berets, et al.


File: mailutils.info,  Node: General date syntax,  Next: Calendar date items,  Up: Date Input Formats

B.1 General date syntax
=======================

A "date" is a string, possibly empty, containing many items separated
by whitespace.  The whitespace may be omitted when no ambiguity arises.
The empty string means the beginning of today (i.e., midnight).  Order
of the items is immaterial.  A date string may contain many flavors of
items:

   * calendar date items

   * time of day items

   * time zone items

   * day of the week items

   * relative items

   * pure numbers.

We describe each of these item types in turn, below.

   A few ordinal numbers may be written out in words in some contexts.
This is most useful for specifying day of the week items or relative
items (see below).  Among the most commonly used ordinal numbers, the
word `last' stands for -1, `this' stands for 0, and `first' and `next'
both stand for 1.  Because the word `second' stands for the unit of
time there is no way to write the ordinal number 2, but for convenience
`third' stands for 3, `fourth' for 4, `fifth' for 5, `sixth' for 6,
`seventh' for 7, `eighth' for 8, `ninth' for 9, `tenth' for 10,
`eleventh' for 11 and `twelfth' for 12.

   When a month is written this way, it is still considered to be
written numerically, instead of being "spelled in full"; this changes
the allowed strings.

   In the current implementation, only English is supported for words
and abbreviations like `AM', `DST', `EST', `first', `January',
`Sunday', `tomorrow', and `year'.

   The output of the `date' command is not always acceptable as a date
string, not only because of the language problem, but also because
there is no standard meaning for time zone items like `IST'.  When using
`date' to generate a date string intended to be parsed later, specify a
date format that is independent of language and that does not use time
zone items other than `UTC' and `Z'.  Here are some ways to do this:

     $ LC_ALL=C TZ=UTC0 date
     Mon Mar  1 00:21:42 UTC 2004
     $ TZ=UTC0 date +'%Y-%m-%d %H:%M:%SZ'
     2004-03-01 00:21:42Z
     $ date --iso-8601=ns | tr T ' '  # --iso-8601 is a GNU extension.
     2004-02-29 16:21:42,692722128-0800
     $ date --rfc-2822  # a GNU extension
     Sun, 29 Feb 2004 16:21:42 -0800
     $ date +'%Y-%m-%d %H:%M:%S %z'  # %z is a GNU extension.
     2004-02-29 16:21:42 -0800
     $ date +'@%s.%N'  # %s and %N are GNU extensions.
     @1078100502.692722128

   Alphabetic case is completely ignored in dates.  Comments may be
introduced between round parentheses, as long as included parentheses
are properly nested.  Hyphens not followed by a digit are currently
ignored.  Leading zeros on numbers are ignored.

   Invalid dates like `2005-02-29' or times like `24:00' are rejected.
In the typical case of a host that does not support leap seconds, a
time like `23:59:60' is rejected even if it corresponds to a valid leap
second.


File: mailutils.info,  Node: Calendar date items,  Next: Time of day items,  Prev: General date syntax,  Up: Date Input Formats

B.2 Calendar date items
=======================

A "calendar date item" specifies a day of the year.  It is specified
differently, depending on whether the month is specified numerically or
literally.  All these strings specify the same calendar date:

     1972-09-24     # ISO 8601.
     72-9-24        # Assume 19xx for 69 through 99,
                    # 20xx for 00 through 68.
     72-09-24       # Leading zeros are ignored.
     9/24/72        # Common U.S. writing.
     24 September 1972
     24 Sept 72     # September has a special abbreviation.
     24 Sep 72      # Three-letter abbreviations always allowed.
     Sep 24, 1972
     24-sep-72
     24sep72

   The year can also be omitted.  In this case, the last specified year
is used, or the current year if none.  For example:

     9/24
     sep 24

   Here are the rules.

   For numeric months, the ISO 8601 format `YEAR-MONTH-DAY' is allowed,
where YEAR is any positive number, MONTH is a number between 01 and 12,
and DAY is a number between 01 and 31.  A leading zero must be present
if a number is less than ten.  If YEAR is 68 or smaller, then 2000 is
added to it; otherwise, if YEAR is less than 100, then 1900 is added to
it.  The construct `MONTH/DAY/YEAR', popular in the United States, is
accepted.  Also `MONTH/DAY', omitting the year.

   Literal months may be spelled out in full: `January', `February',
`March', `April', `May', `June', `July', `August', `September',
`October', `November' or `December'.  Literal months may be abbreviated
to their first three letters, possibly followed by an abbreviating dot.
It is also permitted to write `Sept' instead of `September'.

   When months are written literally, the calendar date may be given as
any of the following:

     DAY MONTH YEAR
     DAY MONTH
     MONTH DAY YEAR
     DAY-MONTH-YEAR

   Or, omitting the year:

     MONTH DAY


File: mailutils.info,  Node: Time of day items,  Next: Time zone items,  Prev: Calendar date items,  Up: Date Input Formats

B.3 Time of day items
=====================

A "time of day item" in date strings specifies the time on a given day.
Here are some examples, all of which represent the same time:

     20:02:00.000000
     20:02
     8:02pm
     20:02-0500      # In EST (U.S.  Eastern Standard Time).

   More generally, the time of day may be given as
`HOUR:MINUTE:SECOND', where HOUR is a number between 0 and 23, MINUTE
is a number between 0 and 59, and SECOND is a number between 0 and 59
possibly followed by `.' or `,' and a fraction containing one or more
digits.  Alternatively, `:SECOND' can be omitted, in which case it is
taken to be zero.  On the rare hosts that support leap seconds, SECOND
may be 60.

   If the time is followed by `am' or `pm' (or `a.m.' or `p.m.'), HOUR
is restricted to run from 1 to 12, and `:MINUTE' may be omitted (taken
to be zero).  `am' indicates the first half of the day, `pm' indicates
the second half of the day.  In this notation, 12 is the predecessor of
1: midnight is `12am' while noon is `12pm'.  (This is the zero-oriented
interpretation of `12am' and `12pm', as opposed to the old tradition
derived from Latin which uses `12m' for noon and `12pm' for midnight.)

   The time may alternatively be followed by a time zone correction,
expressed as `SHHMM', where S is `+' or `-', HH is a number of zone
hours and MM is a number of zone minutes.  The zone minutes term, MM,
may be omitted, in which case the one- or two-digit correction is
interpreted as a number of hours.  You can also separate HH from MM
with a colon.  When a time zone correction is given this way, it forces
interpretation of the time relative to Coordinated Universal Time
(UTC), overriding any previous specification for the time zone or the
local time zone.  For example, `+0530' and `+05:30' both stand for the
time zone 5.5 hours ahead of UTC (e.g., India).  This is the best way to
specify a time zone correction by fractional parts of an hour.  The
maximum zone correction is 24 hours.

   Either `am'/`pm' or a time zone correction may be specified, but not
both.


File: mailutils.info,  Node: Time zone items,  Next: Day of week items,  Prev: Time of day items,  Up: Date Input Formats

B.4 Time zone items
===================

A "time zone item" specifies an international time zone, indicated by a
small set of letters, e.g., `UTC' or `Z' for Coordinated Universal
Time.  Any included periods are ignored.  By following a
non-daylight-saving time zone by the string `DST' in a separate word
(that is, separated by some white space), the corresponding daylight
saving time zone may be specified.  Alternatively, a
non-daylight-saving time zone can be followed by a time zone
correction, to add the two values.  This is normally done only for
`UTC'; for example, `UTC+05:30' is equivalent to `+05:30'.

   Time zone items other than `UTC' and `Z' are obsolescent and are not
recommended, because they are ambiguous; for example, `EST' has a
different meaning in Australia than in the United States.  Instead,
it's better to use unambiguous numeric time zone corrections like
`-0500', as described in the previous section.

   If neither a time zone item nor a time zone correction is supplied,
time stamps are interpreted using the rules of the default time zone
(*note Specifying time zone rules::).


File: mailutils.info,  Node: Day of week items,  Next: Relative items in date strings,  Prev: Time zone items,  Up: Date Input Formats

B.5 Day of week items
=====================

The explicit mention of a day of the week will forward the date (only
if necessary) to reach that day of the week in the future.

   Days of the week may be spelled out in full: `Sunday', `Monday',
`Tuesday', `Wednesday', `Thursday', `Friday' or `Saturday'.  Days may
be abbreviated to their first three letters, optionally followed by a
period.  The special abbreviations `Tues' for `Tuesday', `Wednes' for
`Wednesday' and `Thur' or `Thurs' for `Thursday' are also allowed.

   A number may precede a day of the week item to move forward
supplementary weeks.  It is best used in expression like `third
monday'.  In this context, `last DAY' or `next DAY' is also acceptable;
they move one week before or after the day that DAY by itself would
represent.

   A comma following a day of the week item is ignored.


File: mailutils.info,  Node: Relative items in date strings,  Next: Pure numbers in date strings,  Prev: Day of week items,  Up: Date Input Formats

B.6 Relative items in date strings
==================================

"Relative items" adjust a date (or the current date if none) forward or
backward.  The effects of relative items accumulate.  Here are some
examples:

     1 year
     1 year ago
     3 years
     2 days

   The unit of time displacement may be selected by the string `year'
or `month' for moving by whole years or months.  These are fuzzy units,
as years and months are not all of equal duration.  More precise units
are `fortnight' which is worth 14 days, `week' worth 7 days, `day'
worth 24 hours, `hour' worth 60 minutes, `minute' or `min' worth 60
seconds, and `second' or `sec' worth one second.  An `s' suffix on
these units is accepted and ignored.

   The unit of time may be preceded by a multiplier, given as an
optionally signed number.  Unsigned numbers are taken as positively
signed.  No number at all implies 1 for a multiplier.  Following a
relative item by the string `ago' is equivalent to preceding the unit
by a multiplier with value -1.

   The string `tomorrow' is worth one day in the future (equivalent to
`day'), the string `yesterday' is worth one day in the past (equivalent
to `day ago').

   The strings `now' or `today' are relative items corresponding to
zero-valued time displacement, these strings come from the fact a
zero-valued time displacement represents the current time when not
otherwise changed by previous items.  They may be used to stress other
items, like in `12:00 today'.  The string `this' also has the meaning
of a zero-valued time displacement, but is preferred in date strings
like `this thursday'.

   When a relative item causes the resulting date to cross a boundary
where the clocks were adjusted, typically for daylight saving time, the
resulting date and time are adjusted accordingly.

   The fuzz in units can cause problems with relative items.  For
example, `2003-07-31 -1 month' might evaluate to 2003-07-01, because
2003-06-31 is an invalid date.  To determine the previous month more
reliably, you can ask for the month before the 15th of the current
month.  For example:

     $ date -R
     Thu, 31 Jul 2003 13:02:39 -0700
     $ date --date='-1 month' +'Last month was %B?'
     Last month was July?
     $ date --date="$(date +%Y-%m-15) -1 month" +'Last month was %B!'
     Last month was June!

   Also, take care when manipulating dates around clock changes such as
daylight saving leaps.  In a few cases these have added or subtracted
as much as 24 hours from the clock, so it is often wise to adopt
universal time by setting the `TZ' environment variable to `UTC0'
before embarking on calendrical calculations.


File: mailutils.info,  Node: Pure numbers in date strings,  Next: Seconds since the Epoch,  Prev: Relative items in date strings,  Up: Date Input Formats

B.7 Pure numbers in date strings
================================

The precise interpretation of a pure decimal number depends on the
context in the date string.

   If the decimal number is of the form YYYYMMDD and no other calendar
date item (*note Calendar date items::) appears before it in the date
string, then YYYY is read as the year, MM as the month number and DD as
the day of the month, for the specified calendar date.

   If the decimal number is of the form HHMM and no other time of day
item appears before it in the date string, then HH is read as the hour
of the day and MM as the minute of the hour, for the specified time of
day.  MM can also be omitted.

   If both a calendar date and a time of day appear to the left of a
number in the date string, but no relative item, then the number
overrides the year.


File: mailutils.info,  Node: Seconds since the Epoch,  Next: Specifying time zone rules,  Prev: Pure numbers in date strings,  Up: Date Input Formats

B.8 Seconds since the Epoch
===========================

If you precede a number with `@', it represents an internal time stamp
as a count of seconds.  The number can contain an internal decimal
point (either `.' or `,'); any excess precision not supported by the
internal representation is truncated toward minus infinity.  Such a
number cannot be combined with any other date item, as it specifies a
complete time stamp.

   Internally, computer times are represented as a count of seconds
since an epoch--a well-defined point of time.  On GNU and POSIX
systems, the epoch is 1970-01-01 00:00:00 UTC, so `@0' represents this
time, `@1' represents 1970-01-01 00:00:01 UTC, and so forth.  GNU and
most other POSIX-compliant systems support such times as an extension
to POSIX, using negative counts, so that `@-1' represents 1969-12-31
23:59:59 UTC.

   Traditional Unix systems count seconds with 32-bit two's-complement
integers and can represent times from 1901-12-13 20:45:52 through
2038-01-19 03:14:07 UTC.  More modern systems use 64-bit counts of
seconds with nanosecond subcounts, and can represent all the times in
the known lifetime of the universe to a resolution of 1 nanosecond.

   On most hosts, these counts ignore the presence of leap seconds.
For example, on most hosts `@915148799' represents 1998-12-31 23:59:59
UTC, `@915148800' represents 1999-01-01 00:00:00 UTC, and there is no
way to represent the intervening leap second 1998-12-31 23:59:60 UTC.


File: mailutils.info,  Node: Specifying time zone rules,  Next: Authors of get_date,  Prev: Seconds since the Epoch,  Up: Date Input Formats

B.9 Specifying time zone rules
==============================

Normally, dates are interpreted using the rules of the current time
zone, which in turn are specified by the `TZ' environment variable, or
by a system default if `TZ' is not set.  To specify a different set of
default time zone rules that apply just to one date, start the date
with a string of the form `TZ="RULE"'.  The two quote characters (`"')
must be present in the date, and any quotes or backslashes within RULE
must be escaped by a backslash.

   For example, with the GNU `date' command you can answer the question
"What time is it in New York when a Paris clock shows 6:30am on October
31, 2004?" by using a date beginning with `TZ="Europe/Paris"' as shown
in the following shell transcript:

     $ export TZ="America/New_York"
     $ date --date='TZ="Europe/Paris" 2004-10-31 06:30'
     Sun Oct 31 01:30:00 EDT 2004

   In this example, the `--date' operand begins with its own `TZ'
setting, so the rest of that operand is processed according to
`Europe/Paris' rules, treating the string `2004-10-31 06:30' as if it
were in Paris.  However, since the output of the `date' command is
processed according to the overall time zone rules, it uses New York
time.  (Paris was normally six hours ahead of New York in 2004, but
this example refers to a brief Halloween period when the gap was five
hours.)

   A `TZ' value is a rule that typically names a location in the `tz'
database (http://www.twinsun.com/tz/tz-link.htm).  A recent catalog of
location names appears in the TWiki Date and Time Gateway
(http://twiki.org/cgi-bin/xtra/tzdate).  A few non-GNU hosts require a
colon before a location name in a `TZ' setting, e.g.,
`TZ=":America/New_York"'.

   The `tz' database includes a wide variety of locations ranging from
`Arctic/Longyearbyen' to `Antarctica/South_Pole', but if you are at sea
and have your own private time zone, or if you are using a non-GNU host
that does not support the `tz' database, you may need to use a POSIX
rule instead.  Simple POSIX rules like `UTC0' specify a time zone
without daylight saving time; other rules can specify simple daylight
saving regimes.  *Note Specifying the Time Zone with `TZ': (libc)TZ
Variable.


File: mailutils.info,  Node: Authors of get_date,  Prev: Specifying time zone rules,  Up: Date Input Formats

B.10 Authors of `get_date'
==========================

`get_date' was originally implemented by Steven M.  Bellovin
(<smb@research.att.com>) while at the University of North Carolina at
Chapel Hill.  The code was later tweaked by a couple of people on
Usenet, then completely overhauled by Rich $alz (<rsalz@bbn.com>) and
Jim Berets (<jberets@bbn.com>) in August, 1990.  Various revisions for
the GNU system were made by David MacKenzie, Jim Meyering, Paul Eggert
and others.

   This chapter was originally produced by Franc,ois Pinard
(<pinard@iro.umontreal.ca>) from the `getdate.y' source code, and then
edited by K. Berry (<kb@cs.umb.edu>).


File: mailutils.info,  Node: Usage Vars,  Next: GNU FDL,  Prev: Date Input Formats,  Up: Top

Appendix C Configuring Help Summary
***********************************

Running `PROG --help' displays the short usage summary for PROG utility
(*note Common Options::).  This summary is organized by "groups" of
semantically close options.  The options within each group are printed
in the following order: a short option, eventually followed by a list
of corresponding long option names, followed by a short description of
the option.  For example, here is an excerpt from the actual `sieve
--help' output:

  -c, --compile-only         Compile script and exit
  -d, --debug[=FLAGS]        Debug flags
  -e, --email=ADDRESS        Override user email address

   The exact visual representation of the help output is configurable
via `ARGP_HELP_FMT' environment variable.  The value of this variable
is a comma-separated list of "format variable" assignments.  There are
two kinds of format variables.  An "offset variable" keeps the offset
of some part of help output text from the leftmost column on the
screen.  A "boolean" variable is a flag that toggles some output
feature on or off.  Depending on the type of the corresponding
variable, there are two kinds of assignments:

Offset assignment
     The assignment to an offset variable has the following syntax:

          VARIABLE=VALUE

     where VARIABLE is the variable name, and VALUE is a numeric value
     to be assigned to the variable.

Boolean assignment
     To assign `true' value to a variable, simply put this variable
     name.  To assign `false' value, prefix the variable name with
     `no-'.  For example:

          # Assign `true' value:
          dup-args
          # Assign `false' value:
          no-dup-args

   Following variables are declared:

 -- Help Output: boolean dup-args
     If true, arguments for an option are shown with both short and long
     options, even when a given option has both forms, for example:

            -e ADDRESS, --email=ADDRESS        Override user email address

     If false, then if an option has both short and long forms, the
     argument is only shown with the long one, for example:

            -e, --email=ADDRESS        Override user email address

     and a message indicating that the argument is applicable to both
     forms is printed below the options.  This message can be disabled
     using `dup-args-note' (see below).

     The default is false.

 -- Help Output: boolean dup-args-note
     If this variable is true, which is the default, the following
     notice is displayed at the end of the help output:

          Mandatory or optional arguments to long options are also
          mandatory or optional for any corresponding short options.

     Setting `no-dup-args-note' inhibits this message.  Normally, only
     one of variables `dup-args' or `dup-args-note' should be set.

 -- Help Output: offset short-opt-col
     Column in which short options start.  Default is 2.

          $ sieve --help|grep ADDRESS
            -e, --email=ADDRESS        Override user email address
          $ ARGP_HELP_FMT=short-opt-col=6 sieve --help|grep ARCHIVE
                -e, --email=ADDRESS        Override user email address

 -- Help Output: offset long-opt-col
     Column in which long options start.  Default is 6.  For example:

          $ sieve --help|grep ADDRESS
            -e, --email=ADDRESS        Override user email address
          $ ARGP_HELP_FMT=long-opt-col=16 sieve --help|grep ADDRESS
            -e,           --email=ADDRESS        Override user email address

 -- Help Output: offset doc-opt-col
     Column in which "doc options" start.  A doc option isn't actually
     an option, but rather an arbitrary piece of documentation that is
     displayed in much the same manner as the options.  For example, in
     the output of `folder --help':

     Usage: folder [OPTION...] [action] [msg]
     GNU MH folder
       Actions are:
           --list                 List the contents of the folder stack
       ...

     the string `Actions are:' is a doc option.  Thus, if you set
     `ARGP_HELP_FMT=doc-opt-col=6' the above part of the help output
     will look as follows:

     Usage: folder [OPTION...] [action] [msg]
     GNU MH folder
           Actions are:
           --list                 List the contents of the folder stack
       ...

 -- Help Output: offset opt-doc-col
     Column in which option description starts.  Default is 29.

          $ sieve --help|grep ADDRESS
            -e, --email=ADDRESS        Override user email address
          $ ARGP_HELP_FMT=opt-doc-col=19 sieve --help|grep ADDRESS
            -e, --email=ADDRESS   Override user email address
          $ ARGP_HELP_FMT=opt-doc-col=9 sieve --help|grep -i ADDRESS
            -e, --email=ADDRESS
                   Override user email address

     Notice, that the description starts on a separate line if
     `opt-doc-col' value is too small.

 -- Help Output: offset header-col
     Column in which "group headers" are printed.  A group header is a
     descriptive text preceding an option group.  For example, in the
     following text:

      Sieve options
       -I, --includedir=DIR       Append directory DIR to the
                                  list of include directories
      the text `Sieve options' is a group header.

     The default value is 1.

 -- Help Output: offset usage-indent
     Indentation of wrapped usage lines.  Affects `--usage' output.
     Default is 12.

 -- Help Output: offset rmargin
     Right margin of the text output.  Used for wrapping.


File: mailutils.info,  Node: GNU FDL,  Next: Function Index,  Prev: Usage Vars,  Up: Top

Appendix D GNU Free Documentation License
*****************************************

                      Version 1.2, November 2002

     Copyright (C) 2000-2002, 2010-2012 Free Software Foundation,
     Inc.
     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

D.1 ADDENDUM: How to use this License for your documents
========================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: mailutils.info,  Node: Function Index,  Next: Variable Index,  Prev: GNU FDL,  Up: Top

Function Index
**************

This is an alphabetical list of all Mailutils functions.

 [index ]
* Menu:

* acl:                                   Server Statement.    (line  63)
* address:                               Built-in Tests.      (line  14)
* ago in date strings:                   Relative items in date strings.
                                                              (line  23)
* allow:                                 ACL Statement.       (line  59)
* allow-biffrc:                          General Settings.    (line  12)
* allow-syslog-priority:                 Tcp-wrappers Statement.
                                                              (line  66)
* allow-table:                           Tcp-wrappers Statement.
                                                              (line  60)
* am in date strings:                    Time of day items.   (line  22)
* auth:                                  Radius Statement.    (line  89)
* authentication:                        Auth Statement.      (line 104)
* authorization:                         Auth Statement.      (line  67)
* bulletin-db:                           Conf-pop3d.          (line  53)
* bulletin-source:                       Conf-pop3d.          (line  49)
* clear-include-path:                    Sieve Configuration. (line  35)
* clear-library-path:                    Sieve Configuration. (line  30)
* concat:                                Format String Diffs. (line  89)
* config-file, --config-file option, described: configuration.
                                                              (line  37)
* config-file, --config-file option, introduced: Common Options.
                                                              (line  71)
* config-help, --config-help option, described: configuration.
                                                              (line  82)
* config-help, --config-help option, introduced: Common Options.
                                                              (line  74)
* config-lint, --config-lint option, described: configuration.
                                                              (line  75)
* config-lint, --config-lint option, introduced: Common Options.
                                                              (line  77)
* config-verbose, --config-verbose option, described: configuration.
                                                              (line  46)
* config-verbose, --config-verbose option, introduced: Common Options.
                                                              (line  80)
* create-home-dir:                       Conf-imap4d.         (line  46)
* daemon:                                Tcp-wrappers Statement.
                                                              (line  55)
* day in date strings:                   Relative items in date strings.
                                                              (line  15)
* db:                                    SQL Statement.       (line  78)
* debug <1>:                             Mimeview Config.     (line  14)
* debug <2>:                             Conf-maidag.         (line  50)
* debug:                                 Sieve Configuration. (line  62)
* decode:                                Format String Diffs. (line   7)
* delete-expired:                        Conf-pop3d.          (line  34)
* deny:                                  ACL Statement.       (line  62)
* deny-syslog-priority:                  Tcp-wrappers Statement.
                                                              (line  69)
* deny-table:                            Tcp-wrappers Statement.
                                                              (line  63)
* directory:                             Radius Statement.    (line  38)
* discard:                               Built-in Actions.    (line  35)
* emacs:                                 Movemail Configuration.
                                                              (line  20)
* email:                                 Sieve Configuration. (line  73)
* enable:                                Tcp-wrappers Statement.
                                                              (line  52)
* envelope:                              Built-in Tests.      (line  86)
* ex-multiple-delivery-success:          Conf-maidag.         (line  27)
* ex-quota-tempfail:                     Conf-maidag.         (line  31)
* exec:                                  ACL Statement.       (line 123)
* exists:                                Built-in Tests.      (line 118)
* expire:                                Conf-pop3d.          (line  30)
* expire-timeout:                        Locking Statement.   (line  62)
* external-locker:                       Locking Statement.   (line  66)
* facility:                              Logging Statement.   (line  39)
* false:                                 Built-in Tests.      (line   7)
* fileinto:                              Built-in Actions.    (line  46)
* first in date strings:                 General date syntax. (line  26)
* flags:                                 Locking Statement.   (line  32)
* folder <1>:                            Conf-readmsg.        (line  24)
* folder:                                Mailbox Statement.   (line 183)
* foreground:                            General Server Configuration.
                                                              (line  55)
* form-feeds:                            Conf-readmsg.        (line  21)
* fortnight in date strings:             Relative items in date strings.
                                                              (line  15)
* forward-file:                          Conf-maidag.         (line  68)
* forward-file-checks:                   Conf-maidag.         (line  71)
* get_date:                              Date Input Formats.  (line   6)
* getpwnam:                              Radius Statement.    (line  99)
* getpwuid:                              Radius Statement.    (line 124)
* group:                                 Conf-maidag.         (line  78)
* guile-filter:                          Conf-maidag.         (line  46)
* header <1>:                            Built-in Tests.      (line 138)
* header:                                Conf-readmsg.        (line   9)
* help, --help option, described:        Common Options.      (line   8)
* home-dir-mode:                         Conf-imap4d.         (line  50)
* host:                                  SQL Statement.       (line  67)
* hour in date strings:                  Relative items in date strings.
                                                              (line  15)
* id-fields:                             Conf-imap4d.         (line 110)
* ident-encrypt-only:                    Conf-imap4d.         (line 107)
* ident-keyfile:                         Conf-imap4d.         (line 103)
* ifexec:                                ACL Statement.       (line  65)
* ignore-erros:                          Movemail Configuration.
                                                              (line  24)
* in_reply_to:                           Format String Diffs. (line  98)
* include-path:                          Sieve Configuration. (line  46)
* interface:                             SQL Statement.       (line  50)
* isreply:                               Format String Diffs. (line  54)
* keep:                                  Built-in Actions.    (line  30)
* keep-going:                            Sieve Configuration. (line  52)
* last DAY:                              Day of week items.   (line  15)
* last in date strings:                  General date syntax. (line  26)
* library-path:                          Sieve Configuration. (line  40)
* line-info:                             Sieve Configuration. (line  69)
* list:                                  External Tests.      (line  90)
* listen:                                Conf-maidag.         (line  81)
* lmtp:                                  Conf-maidag.         (line  75)
* log:                                   ACL Statement.       (line  74)
* login-delay:                           Conf-pop3d.          (line  41)
* login-disabled:                        Conf-imap4d.         (line  43)
* mail-spool:                            Mailbox Statement.   (line  30)
* mailbox-ownership:                     Movemail Configuration.
                                                              (line  77)
* mailbox-pattern:                       Mailbox Statement.   (line  40)
* mailbox-type:                          Mailbox Statement.   (line 177)
* max-children:                          General Server Configuration.
                                                              (line  60)
* max-lines:                             General Settings.    (line   9)
* max-requests:                          Security Settings.   (line  10)
* mbox-url:                              Sieve Configuration. (line  56)
* message-id-header:                     Conf-maidag.         (line  42)
* metamail:                              Mimeview Config.     (line  21)
* midnight in date strings:              Time of day items.   (line  22)
* mimetypes:                             Mimeview Config.     (line  18)
* minute in date strings:                Relative items in date strings.
                                                              (line  15)
* mode:                                  General Server Configuration.
                                                              (line  27)
* moderator:                             External Actions.    (line  16)
* month in date strings:                 Relative items in date strings.
                                                              (line  15)
* next DAY:                              Day of week items.   (line  15)
* next in date strings:                  General date syntax. (line  26)
* no-header:                             Conf-readmsg.        (line  18)
* no-site-config, --no-site-config option, described: configuration.
                                                              (line  24)
* no-site-config, --no-site-config option, introduced: Common Options.
                                                              (line  83)
* no-user-config, --no-user-config option, described: configuration.
                                                              (line  34)
* no-user-config, --no-user-config option, introduced: Common Options.
                                                              (line  86)
* noon in date strings:                  Time of day items.   (line  22)
* now in date strings:                   Relative items in date strings.
                                                              (line  33)
* numaddr:                               External Tests.      (line   8)
* other-mailbox-mode:                    Conf-imap4d.         (line  39)
* other-namespace:                       Conf-imap4d.         (line  31)
* overflow-control-interval:             Security Settings.   (line  21)
* overflow-delay-time:                   Security Settings.   (line  17)
* package:                               Format String Diffs. (line  20)
* package_string:                        Format String Diffs. (line  23)
* passwd:                                SQL Statement.       (line  84)
* passwd-dir:                            Virtdomain Statement.
                                                              (line  33)
* pidfile:                               General Server Configuration.
                                                              (line  68)
* pipe:                                  External Actions.    (line  64)
* pm in date strings:                    Time of day items.   (line  22)
* port <1>:                              SQL Statement.       (line  73)
* port:                                  General Server Configuration.
                                                              (line  76)
* preauth:                               Conf-imap4d.         (line  60)
* preauth-only:                          Conf-imap4d.         (line  99)
* preserve:                              Movemail Configuration.
                                                              (line  14)
* print-severity:                        Logging Statement.   (line  48)
* printhdr:                              Format String Diffs. (line  92)
* program-id:                            Movemail Configuration.
                                                              (line  28)
* quota-db:                              Conf-maidag.         (line  35)
* rcpt:                                  Format String Diffs. (line  77)
* redirect:                              Built-in Actions.    (line 182)
* references:                            Format String Diffs. (line 102)
* reject:                                Built-in Actions.    (line 104)
* reply_regex:                           Format String Diffs. (line  36)
* request-control-interval:              Security Settings.   (line  14)
* retry-count:                           Locking Statement.   (line  54)
* retry-timeout:                         Locking Statement.   (line  58)
* reuse-address:                         Conf-maidag.         (line  86)
* reverse:                               Movemail Configuration.
                                                              (line  17)
* service:                               PAM Statement.       (line  25)
* set, --set option, described:          configuration.       (line  92)
* set, --set option, introduced:         Common Options.      (line  89)
* severity:                              Logging Statement.   (line  51)
* shared-mailbox-mode:                   Conf-imap4d.         (line  35)
* shared-namespace:                      Conf-imap4d.         (line  27)
* show-all-match:                        Conf-readmsg.        (line  27)
* show-config-options, --show-config-options option, described: Common Options.
                                                              (line  60)
* sieve:                                 Sieve Configuration. (line  21)
* sieve-filter:                          Conf-maidag.         (line  38)
* single-process:                        Server Statement.    (line  45)
* size:                                  Built-in Tests.      (line  56)
* spamd:                                 External Tests.      (line  36)
* stat-file:                             Conf-pop3d.          (line  45)
* stderr:                                Conf-maidag.         (line  65)
* stop:                                  Built-in Actions.    (line  26)
* syslog:                                Logging Statement.   (line  30)
* tag:                                   Logging Statement.   (line  44)
* this in date strings:                  Relative items in date strings.
                                                              (line  33)
* ticket:                                Sieve Configuration. (line  59)
* timeout <1>:                           Server Statement.    (line  59)
* timeout:                               General Server Configuration.
                                                              (line  83)
* timestamp:                             External Tests.      (line 122)
* tls-required <1>:                      Conf-imap4d.         (line  56)
* tls-required:                          Conf-pop3d.          (line  38)
* today in date strings:                 Relative items in date strings.
                                                              (line  33)
* tomorrow in date strings:              Relative items in date strings.
                                                              (line  29)
* transcript:                            Server Statement.    (line  50)
* true:                                  Built-in Tests.      (line  10)
* uidl:                                  Movemail Configuration.
                                                              (line  70)
* undelete:                              Conf-pop3d.          (line  27)
* unre:                                  Format String Diffs. (line  29)
* url:                                   Mailer Statement.    (line  24)
* usage, --usage option, described:      Common Options.      (line  45)
* user:                                  SQL Statement.       (line  81)
* vacation:                              External Actions.    (line  90)
* verbose <1>:                           Sieve Configuration. (line  66)
* verbose:                               Movemail Configuration.
                                                              (line  74)
* version:                               Format String Diffs. (line  26)
* version, --version option, described:  Common Options.      (line  56)
* weedlist:                              Conf-readmsg.        (line  12)
* week in date strings:                  Relative items in date strings.
                                                              (line  15)
* year in date strings:                  Relative items in date strings.
                                                              (line  15)
* yesterday in date strings:             Relative items in date strings.
                                                              (line  29)


File: mailutils.info,  Node: Variable Index,  Next: Keyword Index,  Prev: Function Index,  Up: Top

Variable Index
**************

 [index ]
* Menu:

* append, mail variable:                 Mail Variables.      (line  10)
* appenddeadletter, mail variable:       Mail Variables.      (line  19)
* ARGP_HELP_FMT, environment variable:   Usage Vars.          (line  18)
* askbcc, mail variable:                 Mail Variables.      (line  27)
* askcc, mail variable:                  Mail Variables.      (line  34)
* asksub, mail variable:                 Mail Variables.      (line  41)
* autoinc, mail variable:                Mail Variables.      (line  48)
* autoprint, mail variable:              Mail Variables.      (line  54)
* bang, mail variable:                   Mail Variables.      (line  61)
* byname, mail variable:                 Mail Variables.      (line  68)
* charset, mail variable:                Mail Variables.      (line  91)
* cmd, mail variable:                    Mail Variables.      (line 103)
* columns, mail variable:                Mail Variables.      (line 110)
* crt, mail variable:                    Mail Variables.      (line 116)
* datefield, mail variable:              Mail Variables.      (line  79)
* debug, mail variable:                  Mail Variables.      (line 128)
* decode-fallback, mail variable:        Mail Variables.      (line 140)
* doc-opt-col:                           Usage Vars.          (line  91)
* dot, mail variable:                    Mail Variables.      (line 166)
* dup-args:                              Usage Vars.          (line  48)
* dup-args-note:                         Usage Vars.          (line  65)
* editheaders, mail variable:            Mail Variables.      (line 181)
* emptystart, mail variable:             Mail Variables.      (line 173)
* escape, mail variable:                 Mail Variables.      (line 189)
* flipr, mail variable:                  Mail Variables.      (line 196)
* folder, mail variable:                 Mail Variables.      (line 203)
* header, mail variable:                 Mail Variables.      (line 220)
* header-col:                            Usage Vars.          (line 127)
* hold, mail variable:                   Mail Variables.      (line 272)
* ignore, mail variable:                 Mail Variables.      (line 281)
* ignoreeof, mail variable:              Mail Variables.      (line 289)
* indentprefix, mail variable:           Mail Variables.      (line 296)
* keepsave, mail variable:               Mail Variables.      (line 320)
* LD_LIBRARY_PATH:                       Require Statement.   (line  85)
* long-opt-col:                          Usage Vars.          (line  83)
* LTDL_LIBRARY_PATH:                     Require Statement.   (line  85)
* mailx, mail variable:                  Mail Variables.      (line 328)
* metamail, mail variable:               Mail Variables.      (line 343)
* metoo, mail variable:                  Mail Variables.      (line 379)
* mimenoask, mail variable:              Mail Variables.      (line 363)
* mode, mail variable:                   Mail Variables.      (line 387)
* MU_DEFAULT_SCHEME:                     Mailbox Statement.   (line 177)
* nullbody, mail variable:               Mail Variables.      (line 413)
* nullbodymsg:                           Mail Variables.      (line 439)
* onehop, mail variable:                 Mail Variables.      (line 449)
* opt-doc-col:                           Usage Vars.          (line 113)
* outfolder, mail variable:              Mail Variables.      (line 456)
* page, mail variable:                   Mail Variables.      (line 464)
* prompt, mail variable:                 Mail Variables.      (line 471)
* quiet, mail variable:                  Mail Variables.      (line 477)
* quit, mail variable:                   Mail Variables.      (line 484)
* rc, mail variable:                     Mail Variables.      (line 490)
* readonly, mail variable:               Mail Variables.      (line 498)
* record, mail variable:                 Mail Variables.      (line 507)
* regex, mail variable:                  Mail Variables.      (line 519)
* replyprefix, mail variable:            Mail Variables.      (line 526)
* replyregex, mail variable:             Mail Variables.      (line 533)
* return-address, mail variable.:        Mail Variables.      (line 550)
* rmargin:                               Usage Vars.          (line 143)
* save, mail variable:                   Mail Variables.      (line 558)
* screen, mail variable:                 Mail Variables.      (line 566)
* sendmail, mail variable:               Mail Variables.      (line 572)
* sendwait, mail variable:               Mail Variables.      (line 578)
* short-opt-col:                         Usage Vars.          (line  75)
* showto, mail variable:                 Mail Variables.      (line 585)
* sign, mail variable:                   Mail Variables.      (line 600)
* Sign, mail variable:                   Mail Variables.      (line 592)
* string:                                Profile Variable Diffs.
                                                              (line   7)
* subject, mail variable:                Mail Variables.      (line 616)
* toplines, mail variable:               Mail Variables.      (line 623)
* TZ:                                    Specifying time zone rules.
                                                              (line   6)
* usage-indent:                          Usage Vars.          (line 139)
* verbose, mail variable:                Mail Variables.      (line 650)
* xmailer, mail variable:                Mail Variables.      (line 657)


File: mailutils.info,  Node: Keyword Index,  Next: Program Index,  Prev: Variable Index,  Up: Top

Keyword Index
*************

 [index ]
* Menu:

* !, mail command:                       Shell Escapes.       (line   6)
* #include, sieve:                       #include.            (line   6)
* #searchpath, sieve:                    #searchpath.         (line   6)
* :all, sieve:                           Tests.               (line  88)
* :comparator, sieve:                    Tests.               (line  69)
* :contains, sieve:                      Tests.               (line  21)
* :count, sieve:                         Tests.               (line  62)
* :domain, sieve:                        Tests.               (line  94)
* :is, sieve:                            Tests.               (line  13)
* :localpart, sieve:                     Tests.               (line  91)
* :matches, sieve:                       Tests.               (line  28)
* :mime:                                 Built-in Tests.      (line 149)
* :over <1>:                             External Tests.      (line  25)
* :over:                                 Built-in Tests.      (line  72)
* :regex, sieve:                         Tests.               (line  36)
* :under <1>:                            External Tests.      (line  28)
* :under:                                Built-in Tests.      (line  75)
* :value, sieve:                         Tests.               (line  40)
* =, mail command:                       Displaying Information.
                                                              (line   6)
* ?, mail command:                       Obtaining Online Help.
                                                              (line   6)
* acl:                                   ACL Statement.       (line   6)
* alias, mail command:                   Aliasing.            (line   6)
* all, sieve:                            Tests.               (line  88)
* allof:                                 Tests and Conditions.
                                                              (line  22)
* alternates, mail command:              Aliasing.            (line   6)
* and, sieve:                            Tests and Conditions.
                                                              (line  22)
* any:                                   ACL Statement.       (line  52)
* anyof:                                 Tests and Conditions.
                                                              (line  22)
* append:                                Mail Variables.      (line   8)
* appenddeadletter:                      Mail Variables.      (line  17)
* askbcc:                                Mail Variables.      (line  25)
* askcc:                                 Mail Variables.      (line  32)
* asksub:                                Mail Variables.      (line  39)
* auth:                                  Auth Statement.      (line  10)
* autoinc:                               Mail Variables.      (line  46)
* autoprint:                             Mail Variables.      (line  52)
* bang:                                  Mail Variables.      (line  59)
* byname:                                Mail Variables.      (line  66)
* charset:                               Mail Variables.      (line  89)
* chdir, mail command:                   Changing mailbox/directory.
                                                              (line   6)
* cmd:                                   Mail Variables.      (line 101)
* columns:                               Mail Variables.      (line 107)
* comparator, sieve:                     Tests.               (line  69)
* contains, sieve:                       Tests.               (line  21)
* Copy, mail command:                    Saving Messages.     (line   6)
* copy, mail command:                    Saving Messages.     (line   6)
* count, sieve:                          Tests.               (line  62)
* crt:                                   Mail Variables.      (line 114)
* datefield:                             Mail Variables.      (line  77)
* debug <1>:                             Mail Variables.      (line 126)
* debug:                                 Debug Statement.     (line   6)
* decode, mail command:                  Displaying Messages. (line   6)
* decode-fallback:                       Mail Variables.      (line 138)
* delete, mail command:                  Disposing of Messages.
                                                              (line   6)
* discard, mail command:                 Controlling Header Display.
                                                              (line   6)
* domain, sieve:                         Tests.               (line  94)
* dot:                                   Mail Variables.      (line 164)
* dp, mail command:                      Disposing of Messages.
                                                              (line   6)
* dt, mail command:                      Disposing of Messages.
                                                              (line   6)
* echo, mail command:                    Scripting.           (line  15)
* edit, mail command:                    Editing Messages.    (line   6)
* editheaders:                           Mail Variables.      (line 179)
* else, mail command:                    Scripting.           (line 115)
* emptystart:                            Mail Variables.      (line 171)
* endif, mail command:                   Scripting.           (line 115)
* escape:                                Mail Variables.      (line 187)
* file, mail command:                    Changing mailbox/directory.
                                                              (line   6)
* flipr:                                 Mail Variables.      (line 194)
* folder:                                Mail Variables.      (line 201)
* folder, mail command:                  Changing mailbox/directory.
                                                              (line   6)
* folders, mail command:                 Displaying Information.
                                                              (line   6)
* Followup, mail command:                Replying.            (line   6)
* followup, mail command:                Replying.            (line   6)
* forward-file:                          Forwarding.          (line  15)
* forward-file-checks:                   Forwarding.          (line  22)
* from, mail command:                    Displaying Information.
                                                              (line   6)
* fromfield:                             Mail Variables.      (line 208)
* GNU-MU-Dir:                            Radius Statement.    (line  48)
* GNU-MU-GECOS:                          Radius Statement.    (line  47)
* GNU-MU-GID:                            Radius Statement.    (line  46)
* GNU-MU-Mailbox:                        Radius Statement.    (line  50)
* GNU-MU-Quota:                          Radius Statement.    (line  51)
* GNU-MU-Shell:                          Radius Statement.    (line  49)
* GNU-MU-UID:                            Radius Statement.    (line  45)
* GNU-MU-User-Name:                      Radius Statement.    (line  43)
* group, mail command:                   Aliasing.            (line   6)
* gsasl:                                 GSASL Statement.     (line   8)
* header:                                Mail Variables.      (line 218)
* headers, mail command:                 Displaying Information.
                                                              (line   6)
* headline:                              Mail Variables.      (line 225)
* help, mail command:                    Obtaining Online Help.
                                                              (line   6)
* hold:                                  Mail Variables.      (line 270)
* hold, mail command:                    Marking Messages.    (line   6)
* if, mail command:                      Scripting.           (line 115)
* if, sieve:                             Control Flow.        (line   6)
* ignore:                                Mail Variables.      (line 279)
* ignore, mail command:                  Controlling Header Display.
                                                              (line   6)
* ignoreeof:                             Mail Variables.      (line 287)
* include:                               Include.             (line   6)
* incorporate, mail command:             Incorporating New Mail.
                                                              (line   6)
* indentprefix:                          Mail Variables.      (line 294)
* inplacealiases:                        Mail Variables.      (line 300)
* is, sieve:                             Tests.               (line  13)
* keep:                                  Mail Variables.      (line 309)
* keepsave:                              Mail Variables.      (line 318)
* ldap:                                  LDAP Statement.      (line   8)
* list, mail command:                    Obtaining Online Help.
                                                              (line   6)
* localpart, sieve:                      Tests.               (line  91)
* locking:                               Locking Statement.   (line   6)
* logging:                               Logging Statement.   (line   6)
* mail, mail command:                    Replying.            (line   6)
* mailbox:                               Mailbox Statement.   (line   6)
* mailer:                                Mailer Statement.    (line   6)
* mailx:                                 Mail Variables.      (line 326)
* matches, sieve:                        Tests.               (line  28)
* mbox, mail command:                    Saving Messages.     (line   6)
* metamail:                              Mail Variables.      (line 341)
* metoo:                                 Mail Variables.      (line 377)
* mimenoask:                             Mail Variables.      (line 361)
* mode:                                  Mail Variables.      (line 385)
* next, mail command:                    Moving Within a Mailbox.
                                                              (line   6)
* nosender, mail command:                Controlling Sender Fields.
                                                              (line   6)
* not, sieve:                            Tests and Conditions.
                                                              (line  18)
* nullbody:                              Mail Variables.      (line 411)
* nullbodymsg:                           Mail Variables.      (line 437)
* onehop:                                Mail Variables.      (line 447)
* or, sieve:                             Tests and Conditions.
                                                              (line  22)
* outfolder:                             Mail Variables.      (line 454)
* page:                                  Mail Variables.      (line 462)
* pam:                                   PAM Statement.       (line  10)
* param:                                 Mailbox Statement.   (line 132)
* pipe, mail command:                    Displaying Messages. (line   6)
* preserve, mail command:                Marking Messages.    (line   6)
* prev, mail command:                    Moving Within a Mailbox.
                                                              (line   6)
* Print, mail command:                   Displaying Messages. (line   6)
* print, mail command:                   Displaying Messages. (line   6)
* prompt:                                Mail Variables.      (line 469)
* quiet:                                 Mail Variables.      (line 475)
* quit:                                  Mail Variables.      (line 482)
* radius:                                Radius Statement.    (line  10)
* rc:                                    Mail Variables.      (line 488)
* readonly:                              Mail Variables.      (line 496)
* record:                                Mail Variables.      (line 505)
* recursivealiases:                      Mail Variables.      (line 511)
* regex:                                 Mail Variables.      (line 517)
* regex, sieve:                          Tests.               (line  36)
* Reply, mail command:                   Replying.            (line   6)
* reply, mail command:                   Replying.            (line   6)
* replyprefix:                           Mail Variables.      (line 524)
* replyregex:                            Mail Variables.      (line 531)
* require, sieve:                        Require Statement.   (line   6)
* Respond, mail command:                 Replying.            (line   6)
* respond, mail command:                 Replying.            (line   6)
* retain, mail command:                  Controlling Header Display.
                                                              (line   6)
* return-address:                        Mail Variables.      (line 548)
* save:                                  Mail Variables.      (line 556)
* Save, mail command:                    Saving Messages.     (line   6)
* save, mail command:                    Saving Messages.     (line   6)
* screen:                                Mail Variables.      (line 563)
* script <1>:                            Python Maidag Filters.
                                                              (line   6)
* script <2>:                            Scheme Maidag Filters.
                                                              (line   6)
* script:                                Sieve Maidag Filters.
                                                              (line   6)
* sender, mail command:                  Controlling Sender Fields.
                                                              (line   6)
* sendmail:                              Mail Variables.      (line 570)
* sendwait:                              Mail Variables.      (line 576)
* server:                                Server Statement.    (line  10)
* set, mail command:                     Scripting.           (line  26)
* shell, mail command:                   Shell Escapes.       (line   6)
* showenvelope:                          Mail Variables.      (line 430)
* showto:                                Mail Variables.      (line 583)
* sign:                                  Mail Variables.      (line 598)
* Sign:                                  Mail Variables.      (line 590)
* size, mail command:                    Displaying Information.
                                                              (line   6)
* source, mail command:                  Scripting.           (line  20)
* sql:                                   SQL Statement.       (line  10)
* struct, mail command:                  Displaying Messages. (line   6)
* subject:                               Mail Variables.      (line 614)
* summary, mail command:                 Displaying Information.
                                                              (line   6)
* tag, mail command:                     Marking Messages.    (line   6)
* tcp-wrappers:                          Tcp-wrappers Statement.
                                                              (line  10)
* text::                                 Lexical Structure.   (line  62)
* tls:                                   TLS Statement.       (line   8)
* top, mail command:                     Displaying Messages. (line   6)
* toplines:                              Mail Variables.      (line 621)
* touch, mail command:                   Saving Messages.     (line   6)
* type:                                  Mailbox Statement.   (line 127)
* Type, mail command:                    Displaying Messages. (line   6)
* type, mail command:                    Displaying Messages. (line   6)
* unalias, mail command:                 Aliasing.            (line   6)
* undelete, mail command:                Disposing of Messages.
                                                              (line   6)
* unset, mail command:                   Scripting.           (line  26)
* user:                                  Mailbox Statement.   (line 135)
* value, sieve:                          Tests.               (line  40)
* variable, mail command:                Scripting.           (line  78)
* variable-pretty-print:                 Mail Variables.      (line 639)
* variable-strict:                       Mail Variables.      (line 627)
* verbose:                               Mail Variables.      (line 648)
* version, mail command:                 Obtaining Online Help.
                                                              (line   6)
* virtdomain:                            Virtdomain Statement.
                                                              (line  10)
* visual, mail command:                  Editing Messages.    (line   6)
* warranty, mail command:                Obtaining Online Help.
                                                              (line   6)
* Write, mail command:                   Saving Messages.     (line   6)
* write, mail command:                   Saving Messages.     (line   6)
* xmailer:                               Mail Variables.      (line 655)
* z, mail command:                       Displaying Information.
                                                              (line   6)
* |, mail command:                       Displaying Messages. (line   6)
* ~!, mail escape:                       Executing Shell Commands.
                                                              (line   6)
* ~-, mail escape:                       Executing Other Mail Commands.
                                                              (line   6)
* ~., mail escape:                       Quitting Compose Mode.
                                                              (line   6)
* ~:, mail escape:                       Executing Other Mail Commands.
                                                              (line   6)
* ~?, mail escape:                       Getting Help on Compose Escapes.
                                                              (line   6)
* ~A, mail escape:                       Signing the Message. (line   6)
* ~a, mail escape:                       Signing the Message. (line   6)
* ~e, mail escape:                       Editing the Message. (line   6)
* ~F, mail escape:                       Printing Another Message.
                                                              (line   6)
* ~f, mail escape:                       Printing Another Message.
                                                              (line   6)
* ~i, mail escape:                       Inserting Value of a Mail Variable.
                                                              (line   6)
* ~M, mail escape:                       Enclosing Another Message.
                                                              (line   6)
* ~m, mail escape:                       Enclosing Another Message.
                                                              (line   6)
* ~p, mail escape:                       Printing And Saving the Message.
                                                              (line   6)
* ~v, mail escape:                       Editing the Message. (line   6)
* ~w, mail escape:                       Printing And Saving the Message.
                                                              (line   6)
* ~x, mail escape:                       Quitting Compose Mode.
                                                              (line   6)
* ~|, mail escape:                       Executing Shell Commands.
                                                              (line   6)


File: mailutils.info,  Node: Program Index,  Next: Concept Index,  Prev: Keyword Index,  Up: Top

Program Index
*************

 [index ]
* Menu:

* comsatd:                               comsatd.              (line  6)
* frm:                                   frm and from.         (line 26)
* from:                                  frm and from.         (line 83)
* guimb:                                 guimb.                (line  6)
* imap4d:                                imap4d.               (line  6)
* maidag:                                maidag.               (line  6)
* mail:                                  mail.                 (line  6)
* messages:                              messages.             (line  6)
* mimeview:                              mimeview.             (line  6)
* movemail:                              movemail.             (line  6)
* mu:                                    mu.                   (line  6)
* pop3d:                                 pop3d.                (line  6)
* readmsg:                               readmsg.              (line  6)
* sieve:                                 sieve.                (line  6)


File: mailutils.info,  Node: Concept Index,  Prev: Program Index,  Up: Top

Concept Index
*************

This is a general index of all issues discussed in this manual

 [index ]
* Menu:

* abbreviations for months:              Calendar date items. (line  38)
* action, sieve:                         Actions Described.   (line   6)
* authentication:                        Auth Statement.      (line  10)
* authorization:                         Auth Statement.      (line  10)
* authors of get_date:                   Authors of get_date. (line   6)
* beginning of time, for POSIX:          Seconds since the Epoch.
                                                              (line  13)
* Bellovin, Steven M.:                   Authors of get_date. (line   6)
* Berets, Jim:                           Authors of get_date. (line   6)
* Berry, K.:                             Authors of get_date. (line  14)
* block statement:                       Statements.          (line 129)
* boolean value:                         Statements.          (line  25)
* calendar date item:                    Calendar date items. (line   6)
* case, ignored in dates:                General date syntax. (line  64)
* Comments in a configuration file:      Comments.            (line   6)
* comments, in dates:                    General date syntax. (line  64)
* comparator, sieve:                     Comparators.         (line   6)
* condition, sieve:                      Tests and Conditions.
                                                              (line  15)
* configuration file statements:         Statements.          (line   6)
* configuring servers:                   Server Settings.     (line  10)
* daemon, server mode:                   General Server Configuration.
                                                              (line  30)
* date format, ISO 8601:                 Calendar date items. (line  30)
* date input formats:                    Date Input Formats.  (line   6)
* day of week item:                      Day of week items.   (line   6)
* direct indexing:                       Mailbox Statement.   (line  82)
* directory indexing:                    Mailbox Statement.   (line  67)
* displacement of dates:                 Relative items in date strings.
                                                              (line   6)
* Eggert, Paul:                          Authors of get_date. (line   6)
* epoch, for POSIX:                      Seconds since the Epoch.
                                                              (line  13)
* escape sequence:                       Statements.          (line  33)
* Exim:                                  Exim-maidag.         (line   6)
* FDL, GNU Free Documentation License:   GNU FDL.             (line   6)
* forward:                               Forwarding.          (line   6)
* general date syntax:                   General date syntax. (line   6)
* hashed indexing:                       Mailbox Statement.   (line 108)
* here-document:                         Statements.          (line  73)
* IMAP4 namespace:                       Namespace.           (line   6)
* include statement, configuration file: Include.             (line   6)
* indexing, direct:                      Mailbox Statement.   (line  82)
* indexing, hashed:                      Mailbox Statement.   (line 108)
* indexing, reverse:                     Mailbox Statement.   (line 102)
* inetd, server mode:                    General Server Configuration.
                                                              (line  42)
* ISO 8601 date format:                  Calendar date items. (line  30)
* items in date strings:                 General date syntax. (line   6)
* language, in dates:                    General date syntax. (line  40)
* Libraries:                             Libraries.           (line   6)
* list:                                  Statements.          (line 113)
* LMTP:                                  MeTA1-maidag.        (line   6)
* MacKenzie, David:                      Authors of get_date. (line   6)
* mailman:                               External Actions.    (line  20)
* Mailutils configuration file:          configuration.       (line   6)
* mailutils.dict:                        Radius Statement.    (line  54)
* mailutils.rc:                          configuration.       (line   6)
* MeTA1:                                 MeTA1-maidag.        (line   6)
* Meyering, Jim:                         Authors of get_date. (line   6)
* minutes, time zone correction by:      Time of day items.   (line  30)
* month names in date strings:           Calendar date items. (line  38)
* months, written-out:                   General date syntax. (line  36)
* multi-line comments:                   Comments.            (line  14)
* multiline strings, sieve:              Lexical Structure.   (line  62)
* namespace:                             Namespace.           (line   6)
* numbers, sieve:                        Lexical Structure.   (line  47)
* numbers, written-out:                  General date syntax. (line  26)
* ordinal numbers:                       General date syntax. (line  26)
* Pinard, F.:                            Authors of get_date. (line  14)
* plus expansion:                        Mailbox Statement.   (line 183)
* preprocessor, sieve:                   Preprocessor.        (line   6)
* Programs:                              Programs.            (line   6)
* pure numbers in date strings:          Pure numbers in date strings.
                                                              (line   6)
* quoted string:                         Statements.          (line  33)
* relative items in date strings:        Relative items in date strings.
                                                              (line   6)
* reverse indexing:                      Mailbox Statement.   (line 102)
* Salz, Rich:                            Authors of get_date. (line   6)
* Sendmail:                              Sendmail-maidag.     (line   6)
* server configuration, general:         General Server Configuration.
                                                              (line  10)
* server settings, configuration:        Server Settings.     (line  10)
* server statement:                      Server Statement.    (line  10)
* Sieve Language:                        Sieve Language.      (line   6)
* Sieve preprocessor statements:         Preprocessor.        (line   6)
* simple statements:                     Statements.          (line   6)
* single-line comments:                  Comments.            (line   6)
* statement, block:                      Statements.          (line 129)
* statement, simple:                     Statements.          (line   6)
* statements, configuration file:        Statements.          (line   6)
* string list, sieve:                    Lexical Structure.   (line 128)
* string, quoted:                        Statements.          (line  33)
* string, unquoted:                      Statements.          (line  29)
* strings, sieve:                        Lexical Structure.   (line  58)
* test, sieve <1>:                       Tests.               (line   6)
* test, sieve:                           Tests and Conditions.
                                                              (line   6)
* time of day item:                      Time of day items.   (line   6)
* time zone correction:                  Time of day items.   (line  30)
* time zone item <1>:                    Time zone items.     (line   6)
* time zone item:                        General date syntax. (line  44)


