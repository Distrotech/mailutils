GNU mailutils NEWS -- history of user-visible changes. 2013-03-21
Copyright (C) 2002-2013 Free Software Foundation, Inc.
See the end of file for copying conditions.

Please send mailutils bug reports to <bug-mailutils@gnu.org>.


Version 2.99.98 (Git)

This version is a major rewrite of GNU Mailutils.  Quite a few parts
of the basic framework were rewritten from scratch, while some others
undergone a considerable revamping.  The user documentation, at the
moment, is insufficient, and in some aspects even scarce.  It is being
worked upon.  However, most of the utilities self-document themselves.  
To obtain a summary of available configuration statements for a given
program, run `program --config-help'.  For additional documentation,
please refer to <http://mailutils.org/wiki>.  If the piece of
documentation you are looking for is not available there, don't
hesitate to post your questions to <bug-mailutils@gnu.org>.

Due to the global nature of these changes, the rewrite of some parts
of the package is not yet finished, while some others are considered
experimental.  Not currently implemented are:

 - nntp client
 
Experimental features are:

 - C++ bindings

The discussion below lists the changes in this release.  It is divided
in three major sections, each addressing a particular audience.  The
section entitles "Important changes" is of particular interest to
users.  This is perhaps the most visible part of this release.  The
section "Configuration changes" addresses package installers.  It
discusses the changes in configure script and related things.
Finally, the section "Changes to the library" is of interest to
programmers which use or wish to use Mailutils in their projects.
 
* Important changes

** IPv6 support.

The core library as well as client and server utilities support
AF_INET6 family of addresses.

** Support for POP3S and IMAP4S in the respective servers.

A single instance of pop3d is able to handle several subservers,
supporting both plain POP3 and encrypted POP3S simultaneously.  The
same holds true for imap4d.

** DBM support reimplemented from scratch.

The most important result of this change is that Mailutils is now able
to handle databases of different formats (e.g. GDBM, Berkeley DB,
NDBM) simultaneously, without need to reconfigure it.  The database
flavor to use is selected at runtime, using `database URL'.  For
example, "gdbm:///etc/mail/aliases.db" refers to a GDBM database.

See <http://mailutils.org/wiki/libmu_dbm>.

** New utility `mu'

`Mu' is a multi-purpose tool which can be of use to users, programmers
and system administrators.  It allows you to retrieve information
about Mailutils configuration, check ACLs and authentication tickets,
list, create or modify DBM files, construct filters of arbitrary
complexity and many more.

See <http://mailutils.org/wiki/mu>.

** Configurable file safety checking

Some files, such as SSL key files, need particular protection, while
others (e.g. users' forward files) don't require it.  Mailutils
configuration allows for configuring what safety checks are required
for each group of files.  Files not meeting the configured criteria
are not used to avoid compromising security.

** Improved debugging and diagnostics

See <http://mailutils.org/wiki/debug_level>.

** Imap4d underwent a lot of changes to comply to existing RFCs

** Pop3d and imap4d allow for mailbox-independent compulsory locking

This feature is useful for those system administrators who don't wish
to permit simultaneous access to mailboxes, even when the nature of the
mailbox allows that (e.g. maildir).

** SMTPS support.

** Sieve: new extensions

New extension action `pipe' invokes arbitrary external program and
pipes the message (or any part thereof) to it.  

See <http://mailutils.org/wiki/Pipe>.

A similar test uses the program exit code to decide what to do with
the message

See <http://mailutils.org/wiki/Pipe_test>.

New extension test `list' compares values of mail headers from a
supplied list with a list of values.

See <http://mailutils.org/wiki/List_(Sieve_test)>.

New extension test `timestamp' compares the value of a structured date
header field with the given date.

See <http://mailutils.org/wiki/Timestamp_(Sieve_test)>.

Implemented the Editheader extension: `addheader' and `delheader' actions.

See <http://tools.ietf.org/html/rfc5293>.

** mail: sending attachments

The mail[x] utility now allows for sending attachments.  Any number of
files can be attached to the composed letter by using the `--attach'
(`-A') options.  The files will be attached in the same order in which
they appear in the command line.  By default, each attachment is
assigned the content type "application/octet-stream" and is encoded
using Base64.  This can be changed using the `--content-type' and
`--encoding' options.  These options affect all attachments that
appear after them in the command line, until next occurrence of the
same option or end of command line, whichever occurs first.  For
example:

  mail -A prog --encoding quoted-printable --content-type text/c \
       -A main.c -A ext.h

Here, the file "prog" will be attached witg the content type
"application/octet-stream" and encoding base64, while the files
"main.c" and "ext.h" will be marked with content type "text/c" and
encoded using "quoted-printable" algorithm.

The mail shell provides the following new escapes to handle attachments:

 ~l
    Lists all attachments.  The output is a numbered list of
    attachments with their corresponding content types and
    encodings.
    
 ~+ filename [content-type [encoding]]
    Attach the file `filename'.  Optional arguments supply the content
    type and encoding to use instead of the defaults.

 ~^ N
    Delete Nth attachment.

** mail: the -r option

The meaning of the `-r' option has changed.  Now it introduces the
return address to use when sending mail.  This is an incompatible
change.

The return address can also be set from the mail shell, by assigning
to the `return-address' variable, e.g.:

 set return-address "gray@gnu.org"
    
** MH: improved compatibility with other implementations

** MH inc: new option --moveto

This option instructs the utility to move incorporated messages into
another folder instead of deleting them. It is implemented only for
input folders of type IMAP or IMAPS. A sample usage is:

 inc -truncate -moveto Read -file imaps://imap.gmail.com

Note the `-truncate' option. 

** MH: multiple sources

The `inc' command is able to incorporate messages from several
source mailboxes. These are specified via multiple `-file'
options, e.g.:

  inc  -truncate \
       -file 'imaps://imap.gmail.com;moveto=archived' \
       -file pops://mail.gnu.org \
       -file /var/mail/root

Additional parameters can be used in URLs supplied with the `-file'
option:

  moveto=FOLDER
    Moves incorporated messages into FOLDER.  This is similar to the
    `--moveto' option, but applies only to that particular mailbox.
    See the example above.
    
  nomoveto
    Disables the previous `--moveto' option.

  truncate[=BOOL]
    Controls source mailbox truncation.  If BOOL is not given or is
    "yes", the mailbox will be truncated after successful processing.
    If BOOL is "no", the source mailbox will not be truncated.

** MH aliases

The "< FILE" construct has been extended to allow for building the
list of aliases on the fly.  If FILE is an executable file and its
first line begins with a shell interpreter magic (#!/ or #! /), then
instead of being included, such file is run using "/bin/sh -c", its
output is collected and included in the aliases.
    
** mailutils-config is deprecated.

Use `mu cflags' and `mu ldflags' instead.  The mailutils-config is
rewritten as a wrapper over these commands.

See <http://mailutils.org/wiki/mu> for more information.

** movemail functionality considerably improved

See <http://mailutils.org/wiki/Fetching_Mail_with_Movemail>.

** Support for Kyoto Cabinet DBM.

Kyoto Cabinet is a library of routines for managing a database. It is
the successor of Tokyo Cabinet. Kyoto Cabinet is a free software
licensed under the GNU General Public License.

* Configuration changes

These are of particular interest to installers.

** New configuration options to disable particular groups of utilities.

The `--enable-build-servers' options controls whether servers (such as
imap4d, pop3d, comsat) will be built.  Its counterpart,
`--enable-build-clients' controls whether client utilities will be
built.

The effect of both options is overridden by the `--enable-build-*'
options for particular components.  For example, to build only
the "mail" utility:

  ./configure --disable-build-clients --enable-build-mail

** The --with-mailbindir option

This option changes installation directory for the "mail" utility.
  
** DBM options

It is normally not needed to specify --with-gdbm, --with-berkeley-db
or --with-ndbm explicitly.  Configuration will automatically pick up
all available DBM libraries it can use.

The option `--with-dbm' can be used to enable or disable building of
all available DBM interfaces.  Its effect is overridden by `--with-*'
options for particular interfaces.  For example, to build only GDBM
(even if another databases are supported by the system):

  ./configure --without-dbm --with-gdbm

** Nntp client is not yet implemented

** Link with GSASL by default

GSASL is used by several Mailutils components (notably pop3d
and imap4d as well as their client counterparts) for authentification.
Since this version, it is enabled by default if configure detects the
presense of GNU SASL version 0.2.3 or later.

This can be disabled using the --without-gsasl option.

** Experimental features

The C++ bindings are considered experimental and unstable.

* Changes to the library

** Stream support is rewritten from scratch

Stream support is a cornerstone on which the rest of Mailutils is
built.  The new implementation was developed with three main
objectives in mind: reliability, speed and consistency.

** URL support is rewritten from scratch

New URL functions allow both for creating URLs from string
representations and for building them from parts.

** Filter support is rewritten from scratch

Apart from the implementation itself, lots of new filters are
provided.  See <http://mailutils.org/wiki/Category:Filters> for a
list of those.

A concept of `filter chains' was introduced, which allows for
creating new filters using existing ones as their components.

See <http://mailutils.org/wiki/Mu#filter>, for a description.

** POP client library is rewritten from scratch

The new library provides two APIs: a traditional mailbox API which
hides the particularities of the POP protocol, and POP-specific API,
which allows for writing applications directly accessing POP features.

** SMTP client library is rewritten from scratch

The new library provides a detailed control over the SMTP
transaction.

** Support for Maildir and MH formats considerably improved.

** The mailbox object contains a `copy' method.

This method copies the requested set of messages into another
mailbox. It is accessed using the `mu_mailbox_msgset_copy' or
`mu_mailbox_message_copy' functions.  So far it is implememented
only for IMAP and IMAPS mailboxes.

** MIME support improved.

** Debugging support considerably improved.

See <http://mailutils.org/wiki/debug_level>.

** Configuration file support (libmu_cfg) rewritten.

* New Scheme primitives

** mu-mailbox-sync

Synchronizes the changes done to the mailbox with its external
storage.

** mu-mailbox-expunge

Similar to mu-mailbox-sync, but also permanently removes messages
marked for deletion.

** mu-mailbox-flush

Marks all messages as seen, and synchronizes the changes with the
mailbox external storage.  Depending on its second argument, removes
messages marked for deletion.


Version 2.2 - 2010-09-08

* Guile support updated to compile with Guile 1.9

* MIME header parser fixed.

It is now fully compatible with RFCs 2231, 2047 and 2183.  Apart from
that, it tolerates a wide variety of malformed headers that may be
generated by the existing MUAs.

* Several fixes in MH repl.

* Improve handling of not implemented options in MH utilities.

* SQL interface allows to use CALL in queries.

* Movemail improvements.

New option --program-id sets the identifier used in diagnostic
messages, instead of the program name.  This is handy if many
instances of mailfromd are being run simultaneously (e.g. to convert
a mailspool contents to another mailbox format).

* Fix eventual mailbox corruption in imap4d.
    
Delivery of a signal when a previous signal was being handled would
cause mailbox corruption.  This is fixed.

* Imap4d: fix FETCH BODY command handling 

FETCH BODY with a nonempty section spec returns section body without
headers, as requested by RFCs 2060, 3501. 

* Several memory-related problems fixed.


Version 2.1 "Ten Years Later" - 2009-09-10:

This release marks the 10 years anniversary of GNU Mailutils.

* New distribution tarballs

Mailutils tar archives are distributed in four compressed formats:
gzip, bzip2, lzma and xz.

* Ticket files

All MU client utilities make use of the user ticket file,
~/.mu-tickets, if it is present.

* Imap4d

New configuration file entities allow to modify user's personal
namespace (the `personal-namespace' statement) and visible home
directory (the `homedir' statement). 

* Movemail

When called with the `--uidl' command line option, the utility tries
to avoid copying the message if a message with the same UIDL already
exists in the destination mailbox.

The `--verbose' command line option enables additional informational
output.

The `--owner' command line option (and the corresponding
`mailbox-ownership' configuration file statement) instructs movemail
to copy mailbox ownership, if the utility is run with root privileges.

* Maidag

Improved scripting capability allows to use mail filters written in
the Python language.

The `--script' command line option sets the name pattern for
user-defined mail filters. Maidag uses the script suffix to
deduce what language it is written in. Supported suffixes are:
`sv', `siv' and `sieve' for Sieve, `scm' and `scheme' for Scheme,
`py' and `pyc' for Python. Additionally, the language may be
defined using the `--language' command line option.

* Mail

** The -f option

The semantics of -f (--file) option fully complies to the POSIX
standard. Namely, this option instructs mail to read messages
from the file named by the first non-optional command line
argument. Therefore, the following four usage patterns are
entirely equivalent:

  mail -fin mymbox
  mail -f mymbox -in
  mail --file -in mymbox
  mail --file -i mymbox -n

In addition, the form

  mail --file=mymbox

is also allowed.  

** The -F option

The -F option (record outgoing messages in a file named after the
first recipient) is implemented.

** struct command

The st[ruct] command lists MIME structures of the message or messages, e.g.:

& struct 2
2[1]  text/plain                 513
2[2]  application/octal-stream  247K
2[3]  text/x-diff                31K

** error locations

Diagnostic messages issued while processing `source' command
include file locations, in compliance with the GNU standards. This
also includes diagnostics issued while parsing the system or user
configuration files.

** envelope command

The env[elope] command displays the SMTP envelopes of the messages
given as its arguments.

** variable command

The va[riable] command describes the known internal mail variables.
When used with arguments, only variables named in the command line are
described.

For each variable, this command prints its name, data type, current
value and a short description.

** headline variable

The headline variable holds a format string to use for the header
summary. Its format is mostly compatible with that of the `nail'
mail reader.

** showenvelope variable

If the `showenvelope' variable is set, print command will include the
SMTP envelope in its output.

** fromfield variable

The `fromfield' boolean variable, if set, instructs mail to obtain
the sender address from the `From:' header.  This is the default.
If unset, the sender address is obtained from the SMTP envelope.

** variable-strict variable

Setting this variable enables strict control over variable
settings. In this mode, mail prints warning if a user is trying to
set an unknown variable and refuses to set read-only variables.

** variable-pretty-print variable

If this variable is set, the `set' listing prints short
descriptions before each variable.

* New interfaces

** Python interface

Mailutils now comes with the Python API. See examples/python/*, for
examples on how to use it.

** C++ interface

The C++ API is built by default, if a c++ compiler is available.

* Support for Tokyo Cabinet DBM.

Tokyo Cabinet is a modern implementation of DBM, developed as the
successor of GDBM and QDBM.  It is written in the C language,
available on platforms which have API conforming to C99 and POSIX.
Tokyo Cabinet is a free software licensed under the GNU Lesser General
Public License.

* API

* New library naming scheme

The names of all mailutils inferior libraries are prefixed with
`libmu_', e.g.: libmu_sieve, libmu_imap, etc. In particular,
`libsieve' is now named `libmu_sieve' and `libcfg' - `libmu_cfg'.

* Wicket/Ticket functions

The wicket/ticket support is rewritten from scratch.

A `wicket' is an object that supplies authentication tickets. The
following user-level functions are available for manipulating
wickets:

- int mu_file_wicket_create (mu_wicket_t *pwicket, const char *filename);

Creates a wicket associated with the ticket file `filename'

- int mu_wicket_get_ticket (mu_wicket_t wicket, const char *user,
	                    mu_ticket_t *pticket);

Obtains authentication ticket for the given user.

- void mu_wicket_destroy (mu_wicket_t *pwicket);

Destroys the wicket and releases any resources associated with it.

A `ticket' is used to obtain user authentication credentials:

- int mu_ticket_get_cred (mu_ticket_t ticket,
			  mu_url_t url, const char *challenge,
			  char **pplain, mu_secret_t *psec);

Obtain plaintext and secret credentials for the given URL and
(optional) authentication challenge. Usually, the plaintext credential
is a user name, and secret one is the corresponding password.

* New mailbox formats

Three new append-only mailbox formats are introduced. The URL syntax of
each of them is the same as that of the corresponding mailer.

** smtp

Send message using the `smtp' mailer. It is equivalent to
`remote+smtp', introduced in previous version.

** sendmail.

Send message using the `sendmail' mailer. It is equivalent to
`remote+sendmail', introduced in previous version.

** prog

Send message using the `prog' mailer. It is equivalent to
`remote+prog', introduced in previous version.

* Deprecated mailbox formats.

The `remote+sendmail', `remote+prog' and `remote+smtp' mailbox formats
are deprecated in favor of `sendmail', `prog' and `smtp',
correspondingly.  

** New functions

- mu_mailbox_get_uidls

** Removed functions

- mu_sieve_get_ticket
- mu_sieve_set_ticket

** Changed functions

*** mu_message_save_to_mailbox: removed `ticket' argument.

The new prototype is:

int mu_message_save_to_mailbox (mu_message_t msg,
                                mu_debug_t debug,
				const char *toname,
				int perms);

*** mu_attribute_to_string

This function now returns a string consisting of flag letters only, without
"Status:" prefix or final newline.


Version 2.0:

* New configuration file format.

See documentation, chapter 2.2, `Mailutils Configuration File', for a
detailed description.

* Programs

** Debugging and online help

Each Mailutils utility understands two additional command line
options:

 --debug-level=LEVEL    Set Mailutils debugging level.
 --debug-line-info      Show source info with debugging messages.

(see also `** Global debugging and verbosity settings.', below)

The programs using configuration file facility also understand the
--config-help command line option.  This option prints on the standard
output the detailed description of configuration file statements that
affect the given program.

** URL parameters.

Additional mailbox URL parameters `type', `user' and `param' can
appear in any local URLs.

** MAIL and FOLDER environment variables.

These variables are consulted only if mail-spool directory is not
explicitely set either in the configuration files or in the command
line. This is different from the previous versions.

** New utility `maidag'

Maidag is a MAIl Delivery AGent. It is a general-purpose MDA able to
run in both traditional and LMTP mode and to deliver mails to various
mailbox formats.  These formats, among others, include remote+smtp and
remote+sendmail (see `New mailbox types.', below), which are
equivalent to forwarding a message over SMTP.  Thus, maidag supercedes
both `mail.local' and `mail.remote' (which are still included for
backward compatibility).  Maidag is also able to process incoming 
messages using Sieve or Scheme scripts and, based on results of this
processing, to take a decision on whether to actually deliver and
where to deliver them.

** Comsat

The `comsat' utility is able to notify about messages delivered to
a mailbox of any `local' type, i.e.: UNIX mailbox, MH and Maildir.
This is implemented using quick access mode.  See `Quick access to a
message', below.

The communication protocol has been modified to make this possible.
The traditional comsat protocol is supported as well.

** Sieve

*** New Sieve action `pipe'

Syntax: pipe [:envelope] <command line: string> 

This action executes the given <command line> and pipes the message to
its standard input. If the :envelope tag is given, the envelope of the
message is piped as well.

*** Fileinto :permissions

The `fileinto' action takes a tag :permissions that allows to set
permissions on the mailbox, in case it is created.  Its argument is a
string, similar to that used in chmod(1):

	[go](+|=)[rw]

For example:

	fileinto :permissions "g=rw,o=r" "/shared/mailbox"

** Client SMTP STARTTLS support

** Support for new protocols: POPS (pops://) and IMAPS (imaps://),

** LDAP support (authentication and authorization).

** Support for TCP wrappers.

The support for TCP wrappers is added to the daemon programs (imap4d,
pop3d, maidag). The support is controlled at compile time by the
--with-tcpwrappers command line options to configure. By default, it
is enabled if libwrap presence is detected. A set of configuration
file statements are provided for fine tuning TCP wrappers at run-time.

** pop3d and imap4d ports.

Pop3d and imap4d can be configured to listen on several different
IP addresses/ports (or even local sockets) simultaneously.

** pop3d: Fixed APOP handling.

** Imap4d supports UNSELECT extension.

** Imap4d supports ID extension.

** imap4d supports PREAUTH mode.

Three mechanisms are provided for authentifying the connection in
PREAUTH mode:

 1. stdio - PREAUTH mode is enabled automatically if imap4d is started
    from command line in interactive mode (-i command line
    option). The current login name is used as the user name.

 2. ident - The remote machine is asked about the requester identity
    using the identification protocol (RFC 1413). Both plaintext and
    DES encrypted replies are understood.

 3. prog - Imap4d invokes an external program to authenticate the
    connection. The command line is obtained from the supplied string,
    by expandind the following variables:

      1) ${client_address} - Remote IP address in dotted-quad notation;
      2) ${client_port}    - Remote port number;
      3) ${server_address} - Local IP address;
      4) ${server_port}    - Local port number.

    If the connection is authenticated, the program should print the
    user name, followed by a newline character, on its standard
    output and exit with code 0.

    Otherwise, it shoud exit with a non-zero exit code.
    
* Libraries

** Support for ESMTP SIZE extension (RFC 1870).

** Diagnostic and debugging functions essentially rewritten.

A set of debugging macros, MU_DEBUG0 through MU_DEBUG11, is provided.
New functions mu_debug_printf and mu_debug_vprintf allow for flexible
formatting of debugging messages. The mu_debug_t object features
built-in line bufferring.

The new function mu_debug_check_level(d,l) returns true if the logging
level currently set for debugging object `d' matches that given by
`l'.

New diagnostics functions are available, among them:

  void mu_diag_vprintf (int level, const char *fmt, va_list ap);
  void mu_diag_printf (int level, const char *fmt, ...);
  void mu_diag_voutput (int level, const char *fmt, va_list ap);
  void mu_diag_output (int level, const char *fmt, ...);

A new header file, mailutils/diag.h, provides declarations for these
and other related functions.
  
See documentation (FIXME: Chapter?) for more information.

The functions mu_error and mu_verror are shortcuts for
mu_diag_output (MU_DIAG_ERROR, ...)  and mu_diag_voutput (MU_DIAG_ERROR, ...),
correspondingly.

The function mu_error_set_print is deprecated as well as the
mu_error_pfn_t type. They are, however, still supported. The following
approach is recommended to use instead of mu_error_set_print:

      mu_diag_get_debug (&debug);
      mu_debug_set_print (debug, new_printer, NULL);

** Header iteration

New function `mu_header_get_iterator' returns an iterator for this
header object. Thus, the following code loops over all headers:

      mu_iterator_t itr;
      mu_header_get_iterator (header, &itr);
      for (mu_iterator_first (itr); !mu_iterator_is_done (itr);
	   mu_iterator_next (itr))
	{
	  const char *hdr, *val;
	  mu_iterator_current_kv (itr,
				  (const void**)&hdr,
				  (void**)&val));
	  /* Do something with hdr and val */			  
	}
      mu_iterator_destroy (&itr);

** Global debugging and verbosity settings.

These settings provide default values for mu_debug_t objects created
by various library objects. The following functions are provided for
dealing with global debugging level:

   unsigned mu_global_debug_level (const char *object_name);
   int mu_global_debug_set_level (const char *object_name, unsigned level);
   int mu_global_debug_clear_level (const char *object_name);

** New function mu_mailbox_sync

It supercedes mu_mailbox_save_attributes, which is now considered
deprecated.

** Observable event handling

Each event type is associated with an event-specific data
pointer. This pointer is passed to event handling functions along with
an opaque function-specific data pointer. This affects the following
functions:

  mu_observer_set_action
  mu_observer_set_action_data (New function)
  mu_observable_notify

New type of event, MU_EVT_MESSAGE_APPEND, is signalled whenever a new
message is appended to the mailbox.

** Quick access to a message

A set of functions are provided for so-called `quick access' to mail
messages.

Quick access is used when an application needs to quickly read one
message from the mailbox. In particular, this mode is used by comsat.

To use quick access functions, the mailbox must be opened with flags
MU_STREAM_READ|MU_STREAM_QACCESS.  The function
mu_mailbox_quick_get_message can then be used to retrieve the message:

   int mu_mailbox_quick_get_message (mu_mailbox_t mbox,
 				    mu_message_qid_t qid,
 				    mu_message_t *pmsg);	

The message is identified by the second argument, qid.

The function mu_message_get_qid can be used to retrieve
mu_message_qid_t identifier for a message:

   int mu_message_get_qid (mu_message_t msg, mu_message_qid_t *pqid);

** New `aget' and `sget' accessors for mu_url_t

The following new accessors are provided:

extern int mu_url_sget_scheme  (const mu_url_t, const char **);
extern int mu_url_aget_scheme  (const mu_url_t, char **);  
  
extern int mu_url_sget_user  (const mu_url_t, const char **);
extern int mu_url_aget_user  (const mu_url_t, char **);  

extern int mu_url_sget_passwd  (const mu_url_t, const char **);
extern int mu_url_aget_passwd  (const mu_url_t, char **);  
  
extern int mu_url_sget_auth  (const mu_url_t, const char **);
extern int mu_url_aget_auth  (const mu_url_t, char **);  

extern int mu_url_sget_host  (const mu_url_t, const char **);
extern int mu_url_aget_host  (const mu_url_t, char **);  
  
extern int mu_url_sget_path  (const mu_url_t, const char **);
extern int mu_url_aget_path  (const mu_url_t, char **);  

extern int mu_url_sget_query  (const mu_url_t, const char **);
extern int mu_url_aget_query  (const mu_url_t, char **);  

int mu_url_sget_fvpairs (const mu_url_t, size_t *, char ***);
int mu_url_aget_fvpairs (const mu_url_t, size_t *, char ***);

** ACL

A set of functions implements general-purpose access control lists.
They are declared in the header file mailutils/acl.h.  Currently,
these functions support IPv4 and UNIX address families.  Support for
more address families, in particular IPv6, will be added in future.
The following actions can be defined in ACLs:

 1. mu_acl_accept       - Accept connection.
 2. mu_acl_deny         - Deny connection.
 3. mu_acl_log          - Issue a log message, using mu_diag.*
                          diagnostics functions.
 4. mu_acl_exec         - Execute an external program. 
 5. mu_acl_ifexec       - Execute an external program and accept or
                          deny connection depending on its exit code.

** KWD

A set of functions is provided for translating string values to
integer tokens and vice-versa using simple translation tables.
These functions are declared in the header file mailutils/kwd.h.

** Vartab

A set of functions is provided for performing variable expansion in
strings. These functions are declared in the header file
mailutils/vartab.h. 
	  
** Incompatible change in mu_url_get_.* return value

Any mu_url_get_.* accessors return MU_ERR_ENOENT if the corresponding
field is not present in the object. Previous versions in that case
returned 0 and stored empty string in the output buffer.

** Prog mailer.

New mailer type, `prog' is introduced. It is a generalization of the
`sendmail' message. The syntax for this mailer type is:

  prog://progname?args

where `args' is a list of command line arguments separated by `&'
signs. When using this mailer, mailutils executes `progname' with the
given arguments and pipes the message to its standard input.

** New mailbox types.

Two new mailbox types, "remote+smtp" and "remote+sendmail", are
supported. These are `append-only' mailboxes, i.e. the only operation
that can be done over them is mu_mailbox_append_message.  E.g.,
appending to the URL `remote+smtp://127.0.0.1:24' is equivalent to
sending a message using mailer `smtp://127.0.0.1:24'.

In addition, "remote+prog" mailbox (abbreviated as "|") is useful for
piping messages to the standard input of an external program.

** New argcv functions.

-  int mu_argcv_get_np (const char *command, int len,
  		        const char *delim, const char *cmnt,
		        int flags,
 		        int *pargc, char ***pargv, char **endp);

This function is an alternative entry point to
mu_argcv_get/mu_argcv_get_n functions. The resulting argv will contain
non-whitespace delimiters only if flags contains the bit
MU_ARGCV_RETURN_DELIMS.

-  void mu_argcv_remove (int *pargc, char ***pargv,
		         int (*sel) (const char *, void *), void *);

Removes from pargc/pargv all elements for which the sel function
returns true.
			 
** New registry functions.

- int mu_registrar_lookup_url (mu_url_t url, int flags,
			       mu_record_t *precord, int *pflags);
			     
** Fixed parsing of URLs similar to file:///a/b. 

It is parsed as an absolute file name `/a/b'.

Previous versions incorrectly understood such an URL as `a/b'
(relative file name). 

** Remove v0.6 compatibility layer.

** Function mu_mail_directory is removed.

** New function mu_mailbox_url.


Version 1.2:

* GPLv3

The programs in this release are licensed under the GNU General Public License
version 3.  The libraries are covered by the GNU Lesser General Public License
version 3.

* `libmailbox' library

** mu_stream_wait and mu_fd_wait allow to wait for exceptional conditions.

** maildir and mh repositories are created if MU_STREAM_CREAT flag is supplied.

** Fix coredump in argcv, which was triggered by input line consisting of
a single double-quote character.

** Fix inconsistency in decoding MIME messages: the CRLF preceding the
encapsulation line is conceptually attached to the boundary, as
requested by RFC 1521.

** Three kinds of accessors.

Each MU object has now three kind of accessors.  The `sget' accessor
returns a pointer to the immutable memory allocated inside the object
and holding its string representation.  The `aget' accessor allocates
new memory chunk, copies there the string representation of the object
and returns the pointer to the allocated memory.  Finally, the `get'
accessor copies the string representation to the character buffer
supplied by the caller.  For example:

  const char *s;
  mu_header_sget_value (hdr, "From", &s);

  char *s
  mu_header_aget_value (hdr, "From", &s);
  [...]
  free (s);

  char buf[SIZE];
  size_t size;
  mu_header_get_value (hdr, "From", buf, sizeof buf, &size);

** RFC2822 Headers.

The RFC 2822 headers support has been rewritten from scratch.  The
accessor functions are able to return a given header instance in case
of multiple headers, something which was impossible in the earlier
Mailutils releases.  These new functions are given identifiers, ending
with `_n', for example:

   int mu_header_sget_value_n (mu_header_t header,
                               const char *name, int n, const char **retval);

The `n' argument gives the ordinal number (1-based) of the header to return.
For example, to get the topmost 'Recieved' header:

   mu_header_sget_value_n (header, "Received", 1, &str);

To count headers from the bottom up, pass negative value of `n',
e.g. to get the last 'Recieved' header:

   mu_header_sget_value_n (header, "Received", -1, &str);

For backward compatibility, traditional header accessors are still
provided, being implemented as macros that expand to the
corresponding `_n' style accessors.   
			              
Important note: `mu_header_aget_value' does not allocate any memory
if the requested header was not found. This differs from its behavior
in previous releases, where it used to return a pointer to an empty
string ("") in that case. 

New functions are provided for adding and replacing headers:

- int mu_header_prepend (mu_header_t header, const char *name, const char *val)

Prepends header `name: val' to the existing headers;

- int mu_header_append (mu_header_t header, const char *name, const char *val)

Appends header `name: val' to the existing headers

- int mu_header_insert (mu_header_t header, const char *name, const char *val, 
  		        const char *ref, int num, int flags)

Inserts header `name: val'. The insertion position is determined by
the last three arguments: 

  -- If flags is MU_HEADER_REPLACE and the header with the same name
     exists, it is replaced by the new header. Otherwise:
  -- If ref == NULL, the header is added before the existing ones;
  -- If ref is not NULL, the new header is inserted after `num'th
     occurrence of the header named `ref'.  If flags is
     MU_HEADER_BEFORE, it is inserted before that occurrence.
     
** New functions `mu_address_set_local_part', `mu_address_set_domain',
`mu_address_set_route', `mu_address_set_email'

* The `mail.local' utility

The program can be run by a non-privileged user.  Thus, it can be used with
`fetchmail' and similar utilities.

Any changes to message headers done by Sieve filters are reflected in
the delivered message.

* The `mail' utility:

Fix bugs in `pipe' command: the cmd variable setting
and single-argument invocation were handled incorrectly

Fix coredump in `send' command.

** Empty messages 

The handling of empty messages by the `mail' utility is controlled by the
bollean variable `nullbody'.  If it is set (the default), the message
is sent and the warning ``Null message body; hope that's ok'' is
issued. This is compatible with other mail implementations. The exact
message displayed in this case is set by `nullbodymsg' variable.

If `nullbody' is unset, the message is silently ignored. This is
useful, in particular, in crontab files.

* The `readmsg' utility.

Improve compatibility with elm's implementation.  In particular -w
'From_' will now output `From ' markers.  If the underlying mailbox
format does not contain those, `readmsg' will try to construct them
from the available data.

* The `pop3d' utility.

New options `--bulletin-db' and `--bulletin-source' implement bulletin
facility.

* The `sieve' utility.

Exit codes conform to sysexits.h.

New working mode: if `-f -' is given, treat stdin as an RFC2822
message, apply the script to it and exit with 1 if the message gets
deleted, 0 if it is not and EX_SOFTWARE on software errors.

* MH changes

** sortm uses stable sort algorithm.
** send supports `--split'. The new option `--chunksize' allows to
set size of chunks to split the message into. The default size is
48032 (632 lines, each of 76 bytes).


* Support for old DBM has been withdrawn.


Version 1.1:

* mail: Implement ^ and $ commands

* Add support for Berkeley DB 3 and 4

* comsat

The syntax of echo command changed. Now it is more shell-like:

echo
echo New mail for \a$u@$h:
echo ---
echo From: $H{From}
echo Subject: $H{Subject}
echo $B(,5)---

** Bug fixes
* Fix build without Guile
* mail core dumped on tab expansion of `cd x'
* Print "-- \n" before ~a expansion in mail
* Fix memory problems in mail's `decode' command
* Fix endless loop in libsieve that was triggered by using a tag without the
arguments it requires.
* Fix unfolding


Version 1.0:

Official release.  This is the first stable release since 0.6.  For a
complete list of changes, please see the entries below.


Version 0.6.95:

* New functions:
** Two new functions (mu_tcp_stream_create_with_source_ip and
mu_tcp_stream_create_with_source_host) allow to create TCP connections
from the given source address. 

* Bugfixes:
** Fix handling of Fcc headers in mailers
** Fix several inconsistencies in `mh/folder' to make it compatible with
RAND and nmh implementations.  In particular, `folder -all +name'
(`folders +name') is now working as expected.
** MH programs create directory hierarchies if requested to.
** `mail' correctly handles empty mailboxes (it used to display garbage in
place of the message count).
** Fix RFC 2047 filters: do not stop translating until the buffer is drained.
** Fix option handling in guimb: remove leftover optind usage.


Version 0.6.94:

* Add support for Berkeley DB 3.x and 4.x
See the description of --with-berkeley-db option in the README file.

* Add support for Guile 1.8.x

* The module mailutils.scm is now defined as (mailutils mailutils). Please
change your (use-modules) statements accordingly.

* Scheme modules can now be installed in the site-wide Guile directory.
See the description of --with-guiledir option in the README file.

* Bugfixes:
** Fix handling of file names containing whitespace characters in imap4 server
and library.
** frm: Fix coredump on empty From headers.
** folder: If a +folder is given along with the -all switch, folder will, in
addition to setting the current folder, list the top-level subfolders
for the current folder (with -norecurse) or list all sub-folders under
the current folder recursively (with -recurse). This behavior is
compatible with nmh and rand implementations.
** rmf: Fix coredump when invoked without arguments.
** send: rename draft file after sending it.
** All mh utilities: create nested directories, if required.
** Correctly handle comma-delimited folder lists in Fcc headers.
** A decoder stream correctly handles unfinished input strings.


Version 0.6.93:

* The library namespace is optimized. Now all global identifiers begin 
with mu_.
NOTE: This is incompatible change.

Programs using old API can still be compiled, using one of the
following approaches. If the program includes <mailutils/mailutils.h>,
define the symbol MU_COMPAT before including it (or invoke cc with
-DMU_COMPAT option). Otherwise, include file <mailutils/compat.h>.

* Main library is renamed to libmailutils
NOTE: This is incompatible change, unless you use mailutils-config to
obtain loader options (which is recommended, anyway).

* Use of '~' character (denoting the user home directory)

This character is expanded also if it appears after the protocol
specification in a mailbox URL. e.g.: maildir:~/Mail/inbox.

It is possible to use '~' in mailutils configuration file.

* New option --mailbox-type

Use this option to specify the default mailbox type. It is supported
by all utilities that use "mailbox" command line capability (see the
documentation for the list). For example:

  mail --mailbox-type=mh: --file=~/Mail/inbox

will open ~/Mail/inbox directory as an MH folder. This option is
especially useful in the mailutils configuration file. For example,
adding this line to your mailutils.rc:

:mailbox  --mailbox-type=mh:

will force all mail utilities to use MH by default.

* mail: New option --exec (-E) allows to execute arbitrary mail commands
before opening the mailbox. Any number of --exec options can be given.

** New variables `recursivealiases' and `inplacealiases' control the way
mail aliases are expanded. When `recursivealiases' is set, aliases
will be expanded recursively. When `inplacealiases' is set, alias
expansion takes place before entering compose mode (by default, it is
carried out when exiting compose mode, right before sending the
message). The default is `set recursivealiases noinplacealiases'.

* imap4d: New option --create-home-dir: If a user logs in and his home
directory does not exist, create it.

* Changes in MH

** Context file handling

Comments and empty lines are allowed in any MH context file
(.mh_profile, .mtstailor etc.)

Comment is any line whose first non-whitespace character is
'#'. Notice that '#' looses its special meaning when used as a part of
the keyword or a value. 

** send

Add support for localname and localdomain mtstailor variables.

New mtstailor variable x-mailer controls whether to add the 'X-Mailer'
header to the message being sent, if it does not contain one. The
value 'yes' means to add the default X-Mailer string, the value
'no' means to ignore it. Any other value is taken as the X-Mailer
identifier to be added to the message.

** mhn

In compose mode mhn analyzes Subject: line and, if it contains any
non-printable characters, encodes it in accordance with RFC
2047. Encoding type and charset are taken from the first message
part. They also can be specified in the subject itself using the
following syntax:

 #<encoding=ENC; charset=CSET>CONTENT

* Bugfixes:
** mail: Fix handling of conditional expressions
** mail: When several recipients were specified, no alias expansion took
place. 
** movemail: did not preserve input mailbox if an I/O error happened on the
output one. Debian Bug#344420.
** Fix handling of Alternate-Mailboxes in MH


Version 0.6.91:

* libsieve: New action 'vacation'

* imap4d: Implemented SASL authentication using LOGIN and PLAIN mechanisms.

* Plaintext passwords for SASL authentication types can be kept in SQL
database. When used with LOGIN or PLAIN, the passwords may be
encrypted using MySQL password() function. New option
--sql-password-type specifies what kind of password is returned by
--sql-getpass query. Its possible values are: `plain' for plaintext
passwords, `scrambled' for passwords hashed using MySQL algorithm and
`hash' for MD5 or DES hashed passwords (default).

* mail

** Improved output of the commands `headers' and `z'

** Improved POSIX compatibility.
In particular, `next' command now works as described by
POSIX. Following commands change the status of the message to `read':
mbox, pipe, print, top, undelete, visual and decode (a GNU extension).
Implemented following variables: flipr, showto, bang.
The command `touch' does not alter messages that were deleted or saved
to a file.

** The `decode' command uses `mailcap' extension to display
parts of MIME multy-part messages. By default the built-in mailcap
engine is used. Normally `mail' asks for confirmation before running
an interpreter to display a message part, unless the type of the part
is listed in `mimenoask' mail variable.

If `metamail' variable is set, it specifies the external program
to be used instead of the built-in engine. Thus, settting

      set metamail="metamail -m mail -p"

in your ~/.mailrc enables use of the standard `metamail' program
by `decode'.

Before calling `metamail', the environment variable METAMAIL_PAGER
is set to the value of the variable PAGER. If `mimenoask' mail
variable is set, its value is passed to `metamail' via MM_NOASK
environment variable.

Unsetting `metamail' variable turns off special interpretation
of MIME parts.

* from
The `from' utility was rewritten. It is now fully compatible with the
BSD version.

* frm
Implemented -t (--align) command line option.
Whenever available, `frm' uses BIDI algorithm for display. This
allows for correct display of subject lines written in languages
with right to left script orientation (Arabic, Hebrew).

* Maildir support
Implemented removal of messages.

* New SQL driver: odbc

* New authentication method: radius

* Ukrainian localization

* Bugfixes

** Fixed possible mailbox corruption in imap4d
** imap4d subscribe/unsubscribe was not working
** Fixed displaying mail headers in different languages (mail,frm,from)
** SQL authentication: prevent sql injection attacks
** Fixed bug in the default syslog diagnostic printer
** Fixed potential vulnerabilities: IDEF0954, IDEF0955, IDEF0956, IDEF0957
** `Imap:' mailboxes (remote mailboxes opened via imap interface) honor
read-only mode.
** Fixed date support in maildir (header fields Date, Envelope-Date and
Delivery-Date). 
** Fixed RFC 2047 encoding.
** Fixed folder_list() function.


Version 0.6:

* New features:

** Both imap4d and pop3d accept new command line option `--tls-required'.

The option disables any authentication commands until the client party
establishes TLS connection with the server.

** Pop3d server accepts new option `--delete-expired'.

This option is to be used together with `--expire'. It enables
automatic deletion of expired messages before closing the
mailbox. Previous versions of pop3d relied on a cron job that
was supposed to purge users' mailboxes, but such usage is extremely
ineffective for mail servers with considerable number of users.

** The package can be compiled with support for both MySQL and PostgreSQL
simultaneously. Which of the interfaces to use is defined at run time
by --sql-interface option.

** Mail.local is able to retrieve mailbox quotas from SQL database.

* movemail: Special mode for interfacing with Emacs (--emacs option)

* Bug fixes


Version 0.5:

* New features:

** Autodetection of local folder formats.

"Local" is a format of mail folder that uses local disk (possibly via
NFS) as its storage medium. Currently mailutils is able to handle
three local formats: UNIX mailbox, MH and Maildir. Usually these are
specified using a corresponding URL prefix. However, if an absolute
path name is given instead of a fully qualified URL, mailutils tries to
autodetect the format of the folder in question and handle it
appropriately (previous versions of mailutils assumed the folder
to be in UNIX mailbox format).

** movemail: new program

Moves mail from the user maildrop (remote or local) to the local file.
It supports all mailbox formats, supported by mailutils.

** Support for "maildir" format.

** sieve:

*** Considerably improved debugging diagnostics.
*** New sieve extension tests:

  spamd	      -		An interface to SpamAssassin daemon
  list	      -		Test headers, structured as lists of values.
  timestamp   -		Compares headers containing dates. 

** mail
*** Support for -a option (append header)
*** New command 'sendheaders' allows to pre-set the headers to be added to
the message.
*** New commands 'sender' and 'nosender' allow to set up a list
of header fields used to determine the sender of the message.
*** New variable 'xmailer' controls whether an X-Mailer header should
be added to outgoing messages.
*** New variables 'datefield' and 'emptystart' for compatibility with
nail
*** New variable 'decode-fallback' controls how to represent the characters
that cannot be rendered using current character set.

** mail.remote
*** Support for -t option (read recipients from the message). This fixes
the bug reported lately where mail.remote sends mail to all addresses
in the message, not just the addresses explicitly listed on the
command line.

** pop3d
*** New option --login-delay. Support for login-delay
*** New option --undelete. Forces pop3d to clear deletion
marks from all messages after opening the mailbox.

* Bug fixes:

** libmailbox
*** Fixed incorrect handling of underscores in Quoted-Printable encoding.
*** rfc2047_decode() takes into account input and output
character sets.

** mh
*** (formataddr): Fixed checking for duplicate addresses.

** pop3d:
*** Do not save delete marks when exiting on timeout.

** imap4d
*** Fixed bug that prevented SASL from working over a TLS encrypted
channel.
*** IDLE works on TLS connections.


Version 0.4:

* Bug fixes:

** Fixed improper use of size_t instead of off_t which caused
coredumps on systems where the two types have different sizes.

** iterator_t is rewritten to make list traversal more effective.
Traversing the list of n elements takes O(n), instead of O(n*(n+1)/2)
time units.

** Fixed memory allocation bug in mailbox/mu_auth.c

** Various fixes and improvements in MH in order to interoperate better
with MH-E.

** Correctly handle MIME parts with an empty body.

* Major Changes

** The library has been split into the core library (libmailbox), and
the protocol implementation libraries, which are named as
libmu_$PROTO. For example, the library for MBOX mailbox formats is
libmu_mbox.so.

** The support for TLS protocol has been added to libmu_imap.so and
libmu_pop.so. This means that you can now use TLS with every
Mailutils client program.

* New features.

** libmailbox

** See "Major Changes"

*** implemented header unfolding

*** argcv_get unescapes all unprintable characters, argcv_string
escapes them.

** libsieve: Implemented boolean shortcuts for evaluating ALLOF and
ANYOF

** pop3d

*** more extensive diagnostics for APOP authentications

*** Save headers even if the session was aborted. This ensures
the persistence of message unique-ids as required by RFC 1939.

*** popauth: new option --create.

The option allows to convert a plaintext file into DBM database.

** mail

*** New configuration file variable `mailx' enables the mailx
compatibility mode. This is mainly visible when composing a message.
In mailx compatibility mode, mail asks for Cc and Bcc addresses after
composing the body.
The default behavior is to ask for these values before composing
the body.

*** New variable `charset' controls the decoding of MIME-encoded headers
(rfc2047).

*** New commands `unfold' and `nounfold' allow to specify the headers
whose values should be unfolded before display.

* mh

Lots of bugfixes regarding compatibility issues and interoperation
with MH-E. This version of MH has been tested with MH-E 7.4.2+cvs.

** New program: ali

** New profile variables:
*** Charset
Controls the character set in which the components decoded via
the `decode' format function should be output.

*** Reply-Regex
Sets the regular expression used to recognize reply messages.

** New format functions
*** reply_regex
Sets the regular expression used to recognize reply messages.

*** isreply
Returns true if its argument is the reply message subject string,
i.e. if it matches the "reply subject" regular expression.


Version 0.3.1:

This version is a maintenance release over the previous one.

* Bug fixes:

** A replacement for vsyslog is provided for systems lacking it.
** Fixed incorrect handling of dates.
** Added support for handling Fcc: headers to the mailer code.
** Several minor fixes to allow the package to compile on MacOS.

* New features:

** Support for authentication against PostgreSQL databases.

* libmailbox:

** First implementation of rfc1524: added a set of functions for handling
mail capabilities

* mh: All utilities needed by Emacs mh-e.el module are implemented.


Version 0.3:

* General:

** Added NLS support. Currently Catalan and Spanish translations
are available.

** Fixed compilation with the newer versions of Berkeley DB.

* libmailbox:

** Functions for generating References: and In-Reply-To: headers as
per RFC 2822.

** A set of functions for sequential access to streams.

** The function mu_errstring is renamed to mu_strerror for consistency
with the usual practice.

** Added initial implementation of message header encoding and decoding
functions (RFC 2047).

* libsieve:

** The syntax of multiline strings is extended. It is possible
to use arbitrary ending delimiter instead of the default dot,
and to strip off the leading tabs, which allows for natural
indentation of the multiline strings.

** Added support for relational tests according to RFC 3431.

** Fixed incorrect handling of multiple addresses in `address'
tests.

* imap4d:

** The untagged output was fixed to conform to the RFC 2060. Specifically,
the output of STORE command is corrected in accordance with the
rfc2060-errata document; the EXIST and RECENT untagged are always
returned by EXAMINE, SELECT, and NOOP.

** Added support for TLS and GSASL.

** Implemented LOGINDISABLED capability.

** Implemented IDLE command (RFC 2177).

* pop3d: Added TLS support.

* mail: Fixed error diagnostics and removed startup banner.

* mh: Initial implementation. The basic MH utilities are implemented
that allow to use the package with the GNU Emacs mh-e module. Please
refer to the files README and TODO in the mh subdirectory.


Version 0.2:

* libmailbox: Several bugfixes. The configuration suite allows
  to disable support for any protocol or mailbox format to reduce
  the size of the library.

* Added new utility mailutils-config. This utility prints gcc command
  line options needed for compiling and linknig an application against
  mailutils.

* libsieve: New library. Supports Sieve language as described in
  RFC 3028 and provides a mechanism for dynamic loading of
  user-defined actions, tests and comparators.

* sieve: Completely rewritten using libsieve.

* sieve.scm: Added vacation extension action.

* mail.local: Allows to apply user-defined sieve filters before delivering
  messages.

* mail utility: Added `editheaders' boolean variable. When set, the
  user is allowed to edit headers of the message.
  Message set specification allows negation of search primitives, e.g.
  `from ! subject:/daily/' outputs all messages whose subject
  does not contain the word 'daily'.
  Reply command correctly adds `In-Reply-To' and `References' headers
  to outgoing messages.
  When used with a numeric argument '=' command sets the current
  message to this number.
  New command `setenv' allows to set and examine environment
  variables.
  The semantics of `crt' variable is made compatible with that of
  other implementations.
  Fixed several bugs.

* libmu_scm: Added support for Guile 1.7.0


Version 0.1:

The first release.


----------------------------------------------------------------------
Copyright information:

Copyright (C) 2002-2012, Free Software Foundation, Inc.

   Permission is granted to anyone to make or distribute verbatim copies
   of this document as received, in any medium, provided that the
   copyright notice and this permission notice are preserved,
   thus giving the recipient permission to redistribute in turn.

   Permission is granted to distribute modified versions
   of this document, or of portions of it,
   under the above conditions, provided also that they
   carry prominent notices stating who last changed them.

Local variables:
mode: outline
paragraph-separate: "[ 	]*$"
eval: (add-hook 'write-file-hooks 'time-stamp)
time-stamp-start: "changes. "
time-stamp-format: "%:y-%02m-%02d"
time-stamp-end: "\n"
end:
